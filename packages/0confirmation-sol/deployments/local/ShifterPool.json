{
  "address": "0x8858eeB3DfffA017D4BCE9801D340D36Cf895CCf",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "creationCode",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        }
      ],
      "name": "_executeSafeView",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "consData",
          "type": "bytes"
        }
      ],
      "name": "cloneConstructor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "computeProxyAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "deployAssetForwarderClone",
      "outputs": [
        {
          "internalType": "address",
          "name": "created",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployAssetForwarderImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployBorrowProxyImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "borrower",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "forbidLoan",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "txData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct ShifterBorrowProxyLib.InitializationAction[]",
                  "name": "actions",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ShifterBorrowProxyLib.LiquidityRequest",
              "name": "request",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "gasRequested",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct ShifterBorrowProxyLib.LiquidityRequestParcel",
          "name": "liquidityRequestParcel",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeoutExpiry",
          "type": "uint256"
        }
      ],
      "name": "executeBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address payable",
                      "name": "borrower",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "nonce",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "forbidLoan",
                      "type": "bool"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "to",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes",
                          "name": "txData",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct ShifterBorrowProxyLib.InitializationAction[]",
                      "name": "actions",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ShifterBorrowProxyLib.LiquidityRequest",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "gasRequested",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ShifterBorrowProxyLib.LiquidityRequestParcel",
              "name": "liquidityRequestParcel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "txhash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "vout",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "pHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "darknodeSignature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ShifterBorrowProxyLib.ShiftParameters",
              "name": "shiftParameters",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "txData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ShifterBorrowProxyLib.InitializationAction[]",
              "name": "actions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ShifterBorrowProxyLib.SansBorrowShiftParcel",
          "name": "parcel",
          "type": "tuple"
        }
      ],
      "name": "executeShiftSansBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        }
      ],
      "name": "fetchModuleHandler",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPrecompiled",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "assetSubmodule",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidationSubmodule",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "repaymentSubmodule",
              "type": "address"
            }
          ],
          "internalType": "struct BorrowProxyLib.Module",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetForwarderImplementationHandler",
      "outputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        }
      ],
      "name": "getGasReserved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getLiquidityTokenForTokenHandler",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getLiquidityTokenHandler",
      "outputs": [
        {
          "internalType": "contract LiquidityToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getProxyOwnerHandler",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        }
      ],
      "name": "getProxyTokenHandler",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getShifterHandler",
      "outputs": [
        {
          "internalType": "contract IShifter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountBorrower",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOrigin",
          "type": "uint256"
        }
      ],
      "name": "payoutCallbackGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "creationCode",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct SafeViewLib.SafeViewResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidityToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalAmount",
          "type": "uint256"
        }
      ],
      "name": "relayResolveLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isKeeper",
          "type": "bool"
        }
      ],
      "name": "setKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "shifterRegistry",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minTimeout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daoFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLoan",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxGasPriceForRefund",
              "type": "uint256"
            }
          ],
          "internalType": "struct ShifterPoolLib.SetupParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum BorrowProxyLib.ModuleRegistrationType",
              "name": "moduleType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "sigs",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct BorrowProxyLib.ModuleDetails[]",
          "name": "moduleDetails",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPrecompiled",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "assetSubmodule",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidationSubmodule",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "repaymentSubmodule",
              "type": "address"
            }
          ],
          "internalType": "struct BorrowProxyLib.Module[]",
          "name": "modules",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liqToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "baseFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ShifterPoolLib.LiquidityTokenLaunch[]",
          "name": "tokenLaunches",
          "type": "tuple[]"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proxyRecord",
          "type": "bytes"
        }
      ],
      "name": "validateProxyRecordHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6a5bbf509b30a9034622c132cf085c713a45a401a433a6a88f9171fb98ea0284",
  "receipt": {
    "to": null,
    "from": "0xc783df8a850f42e7F7e57013759C285caa701eB6",
    "contractAddress": "0x8858eeB3DfffA017D4BCE9801D340D36Cf895CCf",
    "transactionIndex": 0,
    "gasUsed": "4101546",
    "logsBloom": "0x
    "blockHash": "0xa16fad095e1f7d0f446995dc4522417645de744096c4849496c9ed6d9328cf37",
    "transactionHash": "0x6a5bbf509b30a9034622c132cf085c713a45a401a433a6a88f9171fb98ea0284",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x6a5bbf509b30a9034622c132cf085c713a45a401a433a6a88f9171fb98ea0284",
        "address": "0x8858eeB3DfffA017D4BCE9801D340D36Cf895CCf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c783df8a850f42e7f7e57013759c285caa701eb6"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa16fad095e1f7d0f446995dc4522417645de744096c4849496c9ed6d9328cf37"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "4101546",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0x4ad71a06889361ed9ee42fc3cc3f9d59e654b4607e98c6d6bba47a63180890ff",
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"creationCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"_executeSafeView\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"consData\",\"type\":\"bytes\"}],\"name\":\"cloneConstructor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"computeProxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"deployAssetForwarderClone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"created\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployAssetForwarderImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployBorrowProxyImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forbidLoan\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"}],\"internalType\":\"struct ShifterBorrowProxyLib.InitializationAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ShifterBorrowProxyLib.LiquidityRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gasRequested\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ShifterBorrowProxyLib.LiquidityRequestParcel\",\"name\":\"liquidityRequestParcel\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutExpiry\",\"type\":\"uint256\"}],\"name\":\"executeBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forbidLoan\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"}],\"internalType\":\"struct ShifterBorrowProxyLib.InitializationAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ShifterBorrowProxyLib.LiquidityRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gasRequested\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ShifterBorrowProxyLib.LiquidityRequestParcel\",\"name\":\"liquidityRequestParcel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"txhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vout\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"pHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"darknodeSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct ShifterBorrowProxyLib.ShiftParameters\",\"name\":\"shiftParameters\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"}],\"internalType\":\"struct ShifterBorrowProxyLib.InitializationAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ShifterBorrowProxyLib.SansBorrowShiftParcel\",\"name\":\"parcel\",\"type\":\"tuple\"}],\"name\":\"executeShiftSansBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"fetchModuleHandler\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPrecompiled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"assetSubmodule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidationSubmodule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"repaymentSubmodule\",\"type\":\"address\"}],\"internalType\":\"struct BorrowProxyLib.Module\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetForwarderImplementationHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"getGasReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLiquidityTokenForTokenHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLiquidityTokenHandler\",\"outputs\":[{\"internalType\":\"contract LiquidityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getProxyOwnerHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"getProxyTokenHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getShifterHandler\",\"outputs\":[{\"internalType\":\"contract IShifter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOrigin\",\"type\":\"uint256\"}],\"name\":\"payoutCallbackGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"creationCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"query\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SafeViewLib.SafeViewResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"}],\"name\":\"relayResolveLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isKeeper\",\"type\":\"bool\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"shifterRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPriceForRefund\",\"type\":\"uint256\"}],\"internalType\":\"struct ShifterPoolLib.SetupParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum BorrowProxyLib.ModuleRegistrationType\",\"name\":\"moduleType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"sigs\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct BorrowProxyLib.ModuleDetails[]\",\"name\":\"moduleDetails\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPrecompiled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"assetSubmodule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidationSubmodule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"repaymentSubmodule\",\"type\":\"address\"}],\"internalType\":\"struct BorrowProxyLib.Module[]\",\"name\":\"modules\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liqToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ShifterPoolLib.LiquidityTokenLaunch[]\",\"name\":\"tokenLaunches\",\"type\":\"tuple[]\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proxyRecord\",\"type\":\"bytes\"}],\"name\":\"validateProxyRecordHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ShifterPool.sol\":\"ShifterPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x1efcb1ccef6b3bce65467c4b704cec8d0582e35ff48352269ba8cda4b54ae3da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x6c234834003dfb86e2c23d12dfdde7cc01e78013d71b52162cb308b4873562cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x657b0d90be17331364211d74359df2a734fac864f6e88c80de7626fa33090ffb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint256(_data));\\n    }\\n}\\n\",\"keccak256\":\"0x16926b3c19504ea52f73abe41dfa9c1ef9c328d6088b82162d475caecaa47a6d\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"contracts/BorrowProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.6.0;\\n\\nimport { BorrowProxyLib } from \\\"./BorrowProxyLib.sol\\\";\\nimport { RevertCaptureLib } from \\\"./utils/RevertCaptureLib.sol\\\";\\nimport { SliceLib } from \\\"./utils/SliceLib.sol\\\";\\nimport { IShifter } from \\\"./interfaces/IShifter.sol\\\";\\nimport { IBorrowProxyController } from \\\"./interfaces/IBorrowProxyController.sol\\\";\\nimport { AddressSetLib } from \\\"./utils/AddressSetLib.sol\\\";\\nimport { ModuleLib } from \\\"./adapters/lib/ModuleLib.sol\\\";\\n\\ncontract BorrowProxy {\\n  using SliceLib for *;\\n  using BorrowProxyLib for *;\\n  using AddressSetLib for *;\\n  BorrowProxyLib.ProxyIsolate isolate;\\n  modifier onlyOwnerOrPool {\\n   require(msg.sender == isolate.owner || msg.sender == isolate.masterAddress || msg.sender == address(this), \\\"borrow proxy can only be used by borrower\\\");\\n    _;\\n  }\\n  function setup(address owner, address token, bool unbound) public returns (bool) {\\n    require(isolate.owner == address(0x0), \\\"can't initialize twice\\\");\\n    isolate.masterAddress = msg.sender;\\n    isolate.owner = owner;\\n    isolate.unbound = unbound;\\n    isolate.token = token;\\n    return true;\\n  }\\n  function validateProxyRecord(bytes memory record) internal returns (bool) {\\n    return IBorrowProxyController(isolate.masterAddress).validateProxyRecordHandler(record);\\n  }\\n  function proxy(address to, uint256 value, bytes memory payload) public onlyOwnerOrPool {\\n    require(to != isolate.masterAddress, \\\"can't target the ShifterPool\\\");\\n    bytes4 sig = bytes4(uint32(uint256(payload.toSlice(0, 4).asWord())));\\n    BorrowProxyLib.ModuleExecution memory module = isolate.fetchModule(to, sig);\\n    module.token = isolate.token;\\n    if (isolate.unbound && !module.encapsulated.isPrecompiled) {\\n      (bool success, bytes memory retval) = to.call{\\n        value: value\\n      }(payload);\\n      if (!success) revert(RevertCaptureLib.decodeError(retval));\\n      ModuleLib.bubbleResult(success, retval);\\n      return;\\n    }\\n    require(module.encapsulated.isDefined(), \\\"function handler not registered\\\");\\n    (bool success, bytes memory retval) = module.delegate(payload, value);\\n    if (!success) revert(RevertCaptureLib.decodeError(retval));\\n    if (module.encapsulated.liquidationSubmodule != address(0x0)) isolate.liquidationSet.insert(module.encapsulated.liquidationSubmodule);\\n    if (module.encapsulated.repaymentSubmodule != address(0x0)) {\\n      isolate.repaymentSet.insert(module.encapsulated.repaymentSubmodule);\\n    }\\n    ModuleLib.bubbleResult(success, retval);\\n  }\\n  receive() external payable virtual {\\n    // just receive ether, do nothing\\n  } \\n  fallback() external payable virtual {}\\n}\\n\",\"keccak256\":\"0x03d42cac11c2991b721b81bde53cf60542339ee279c1d420a1e5fb1254dadba9\",\"license\":\"MIT\"},\"contracts/BorrowProxyLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport { IModuleRegistryProvider } from \\\"./interfaces/IModuleRegistryProvider.sol\\\";\\nimport { AddressSetLib } from \\\"./utils/AddressSetLib.sol\\\";\\nimport { ExtLib } from \\\"./utils/ExtLib.sol\\\";\\nimport { RevertCaptureLib } from \\\"./utils/RevertCaptureLib.sol\\\";\\nimport { SandboxLib } from \\\"./utils/sandbox/SandboxLib.sol\\\";\\nimport { ModuleLib } from \\\"./adapters/lib/ModuleLib.sol\\\";\\n\\nlibrary BorrowProxyLib {\\n  using ModuleLib for *;\\n  struct ProxyIsolate {\\n    address payable masterAddress;\\n    bool unbound;\\n    address owner;\\n    address token;\\n    uint256 actualizedShift;\\n    uint256 liquidationIndex;\\n    uint256 repaymentIndex;\\n    bool isRepaying;\\n    bool isLiquidating;\\n    AddressSetLib.AddressSet liquidationSet;\\n    AddressSetLib.AddressSet repaymentSet;\\n  }\\n  struct ControllerIsolate {\\n    mapping (address => bytes32) proxyInitializerRecord;\\n    mapping (address => address) ownerByProxy;\\n    mapping (address => address) tokenByProxy;\\n    mapping (address => bool) isKeeper;\\n  }\\n  struct Module {\\n    bool isPrecompiled;\\n    address assetSubmodule;\\n    address liquidationSubmodule;\\n    address repaymentSubmodule;\\n  }\\n  struct ModuleDetails {\\n    ModuleRegistrationType moduleType;\\n    address target;\\n    bytes4[] sigs;\\n  }\\n  struct ModuleRegistration {\\n    ModuleRegistrationType moduleType;\\n    address target;\\n    bytes4[] sigs;\\n    Module module;\\n  }\\n  enum ModuleRegistrationType {\\n    UNINITIALIZED,\\n    BY_CODEHASH,\\n    BY_ADDRESS\\n  }\\n  struct ModuleExecution {\\n    address to;\\n    address token;\\n    Module encapsulated;\\n  }\\n  function registryRegisterModule(ModuleRegistry storage registry, ModuleRegistration memory registration) internal {\\n    if (registration.moduleType == ModuleRegistrationType.BY_CODEHASH) for (uint256 i = 0; i < registration.sigs.length; i++) {\\n      registerModuleByCodeHash(registry, registration.target, registration.sigs[i], registration.module);\\n    } else if (registration.moduleType == ModuleRegistrationType.BY_ADDRESS) for (uint256 i = 0; i < registration.sigs.length; i++) {\\n      registerModuleByAddress(registry, registration.target, registration.sigs[i], registration.module);\\n    }\\n  }\\n  function encodeLiquidate(address liquidationSubmodule) internal pure returns (bytes memory retval) {\\n    retval = abi.encodeWithSignature(\\\"liquidate(address)\\\", liquidationSubmodule);\\n  }\\n  function decodeBool(bytes memory input) internal pure returns (bool retval) {\\n    (retval) = abi.decode(input, (bool));\\n  }\\n  function delegateLiquidate(address liquidationSubmodule) internal returns (bool) {\\n    (bool success, bytes memory retval) = liquidationSubmodule.delegatecall(encodeLiquidate(liquidationSubmodule));\\n    if (!success) revert(RevertCaptureLib.decodeError(retval));\\n    return decodeBool(retval);\\n  }\\n  function encodeRepay(address repaymentSubmodule) internal pure returns (bytes memory retval) {\\n    retval = abi.encodeWithSignature(\\\"repay(address)\\\", repaymentSubmodule);\\n  }\\n  function delegateRepay(address repaymentSubmodule) internal returns (bool) {\\n    (bool success, bytes memory retval) = repaymentSubmodule.delegatecall(encodeRepay(repaymentSubmodule));\\n    if (!success) revert(RevertCaptureLib.decodeError(retval));\\n    return decodeBool(retval);\\n  }\\n  function encodeNotify(address liquidationSubmodule, bytes memory payload) internal pure returns (bytes memory retval) {\\n    retval = abi.encodeWithSignature(\\\"notify(address,bytes)\\\", liquidationSubmodule, payload);\\n  }\\n  function delegateNotify(address liquidationSubmodule, bytes memory payload) internal returns (bool) {\\n    (bool success,) = liquidationSubmodule.delegatecall(encodeNotify(liquidationSubmodule, payload));\\n    return success;\\n  }\\n  function delegate(ModuleExecution memory module, bytes memory payload, uint256 value) internal returns (bool, bytes memory) {\\n    (bool success, bytes memory retval) = module.encapsulated.assetSubmodule.delegatecall{ gas: gasleft() }(ModuleLib.AssetSubmodulePayload({\\n      moduleAddress: address(uint160(module.encapsulated.assetSubmodule)),\\n      liquidationSubmodule: module.encapsulated.liquidationSubmodule,\\n      repaymentSubmodule: module.encapsulated.repaymentSubmodule,\\n      token: address(uint160(module.token)),\\n      txOrigin: tx.origin,\\n      to: address(uint160(module.to)),\\n      value: value,\\n      callData: payload\\n    }).encodeWithSelector());\\n    return (success, retval);\\n  }\\n  function isDefined(Module memory module) internal pure returns (bool) {\\n    return module.assetSubmodule != address(0x0);\\n  }\\n  function isInitialized(ControllerIsolate storage isolate, address proxyAddress) internal view returns (bool) {\\n    return isolate.proxyInitializerRecord[proxyAddress] != bytes32(uint256(0x0));\\n  }\\n  struct ModuleRegistry {\\n    mapping (bytes32 => Module) modules;\\n  }\\n  function isDisbursing(ProxyIsolate storage isolate) internal view returns (bool) {\\n    return isolate.isLiquidating && isolate.liquidationIndex != isolate.liquidationSet.set.length;\\n  }\\n  event BorrowProxyMade(address indexed user, address indexed proxyAddress, bytes record);\\n  function emitBorrowProxyMade(address user, address proxyAddress, bytes memory record) internal {\\n    emit BorrowProxyMade(user, proxyAddress, record);\\n  }\\n  function computeModuleKeyPreimage(address to, bytes4 signature) internal pure returns (bytes memory result) {\\n    result = abi.encodePacked(to, signature);\\n  }\\n  function computeModuleKey(address to, bytes4 signature) internal pure returns (bytes32) {\\n    return keccak256(computeModuleKeyPreimage(to, signature));\\n  }\\n  function computeCodeResolverKeyPreimage(bytes32 codehash, bytes4 signature) internal pure returns (bytes memory result) {\\n    result = abi.encodePacked(codehash, signature);\\n  }\\n  function computeCodeResolverKey(address to, bytes4 signature) internal view returns (bytes32) {\\n    bytes32 exthash = ExtLib.getExtCodeHash(to);\\n    return keccak256(computeCodeResolverKeyPreimage(exthash, signature));\\n  }\\n  function resolveModule(ModuleRegistry storage registry, address to, bytes4 sig) internal view returns (Module memory) {\\n    Module memory module = registry.modules[computeCodeResolverKey(to, sig)];\\n    if (!isDefined(module)) module = registry.modules[computeModuleKey(to, sig)];\\n    return module;\\n  }\\n  function getModuleExecution(ModuleRegistry storage registry, address to, bytes4 signature) internal view returns (ModuleExecution memory) {\\n    Module memory encapsulated = resolveModule(registry, to, signature);\\n    return ModuleExecution({\\n      encapsulated: encapsulated,\\n      token: address(0x0), // fill in in the proxy call\\n      to: to\\n    });\\n  }\\n  function validateProxyRecord(ControllerIsolate storage isolate, address proxyAddress, bytes memory data) internal view returns (bool) {\\n    return isolate.proxyInitializerRecord[proxyAddress] == keccak256(data);\\n  }\\n  function mapProxyRecord(ControllerIsolate storage isolate, address proxyAddress, bytes memory data) internal {\\n    isolate.proxyInitializerRecord[proxyAddress] = keccak256(data);\\n  }\\n  function setProxyOwner(ControllerIsolate storage isolate, address proxyAddress, address identity) internal {\\n    isolate.ownerByProxy[proxyAddress] = identity;\\n  }\\n  function setProxyToken(ControllerIsolate storage isolate, address proxyAddress, address token) internal {\\n    isolate.tokenByProxy[proxyAddress] = token;\\n  }\\n  function getProxyToken(ControllerIsolate storage isolate, address proxyAddress) internal view returns (address) {\\n    return isolate.tokenByProxy[proxyAddress];\\n  }\\n  function getProxyOwner(ControllerIsolate storage isolate, address proxyAddress) internal view returns (address) {\\n    return isolate.ownerByProxy[proxyAddress];\\n  }\\n  function registerModuleByAddress(ModuleRegistry storage registry, address to, bytes4 signature, Module memory module) internal {\\n    registry.modules[computeModuleKey(to, signature)] = module;\\n  }\\n  function registerModuleByCodeHash(ModuleRegistry storage registry, address to, bytes4 signature, Module memory module) internal {\\n    registry.modules[computeCodeResolverKey(to, signature)] = module;\\n  }\\n  function fetchModule(ProxyIsolate storage isolate, address to, bytes4 signature) internal returns (ModuleExecution memory) {\\n    return ModuleExecution({\\n      encapsulated: IModuleRegistryProvider(isolate.masterAddress).fetchModuleHandler(to, signature),\\n      token: isolate.token,\\n      to: to\\n    });\\n  }\\n}\\n\",\"keccak256\":\"0xec2de85244c570599f4c128c83ffdbe413b6f44c81cd59eb0f244b6686e4700b\",\"license\":\"MIT\"},\"contracts/FactoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nlibrary FactoryLib {\\n  function computeCreationCode(address target) internal view returns (bytes memory clone) {\\n    clone = computeCreationCode(address(this), target);\\n  }\\n  function computeCreationCode(address deployer, address target) internal pure returns (bytes memory clone) {\\n      bytes memory consData = abi.encodeWithSignature(\\\"cloneConstructor(bytes)\\\", new bytes(0));\\n      clone = new bytes(99 + consData.length);\\n      assembly {\\n        mstore(add(clone, 0x20),\\n           0x3d3d606380380380913d393d73bebebebebebebebebebebebebebebebebebebe)\\n        mstore(add(clone, 0x2d),\\n           mul(deployer, 0x01000000000000000000000000))\\n        mstore(add(clone, 0x41),\\n           0x5af4602a57600080fd5b602d8060366000396000f3363d3d373d3d3d363d73be)\\n           mstore(add(clone, 0x60),\\n           mul(target, 0x01000000000000000000000000))\\n        mstore(add(clone, 116),\\n           0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      }\\n      for (uint256 i = 0; i < consData.length; i++) {\\n        clone[i + 99] = consData[i];\\n      }\\n  }\\n  function deriveInstanceAddress(address target, bytes32 salt) internal view returns (address) {\\n    return Create2.computeAddress(salt, keccak256(computeCreationCode(target)));\\n  }\\n  function deriveInstanceAddress(address from, address target, bytes32 salt) internal pure returns (address) {\\n     return Create2.computeAddress(salt, keccak256(computeCreationCode(from, target)), from);\\n  }\\n  function create2Clone(address target, uint saltNonce) internal returns (address result) {\\n    bytes memory clone = computeCreationCode(target);\\n    bytes32 salt = bytes32(saltNonce);\\n      \\n    assembly {\\n      let len := mload(clone)\\n      let data := add(clone, 0x20)\\n      result := create2(0, data, len, salt)\\n    }\\n      \\n    require(result != address(0), \\\"create2 failed\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x09418dc79042d919578b3bff5fe513e9dfcee33d26cd0548076b2ccd3287f6ca\",\"license\":\"MIT\"},\"contracts/LiquidityToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.6.0;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC20Burnable } from \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport { TokenUtils } from \\\"./utils/TokenUtils.sol\\\";\\nimport { IUniswapV2Router01 } from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract LiquidityToken is ERC20, ERC20Burnable {\\n  using TokenUtils for *;\\n  address payable public pool;\\n  address public asset;\\n  address public router;\\n  address public weth;\\n  uint256 public offset;\\n  mapping (address => uint256) public outstandingLoans;\\n  constructor(address _weth, address _router, address payable shifterPool, address underlyingAsset, string memory name, string memory symbol, uint8 decimals) ERC20(name, symbol) public {\\n    weth = _weth;\\n    router = _router;\\n    pool = shifterPool;\\n    asset = underlyingAsset;\\n    require(weth.approveForMaxIfNeeded(router) && asset.approveForMaxIfNeeded(router), \\\"failed to approve router for asset\\\");\\n    _setupDecimals(decimals);\\n  }\\n  modifier onlyPool {\\n    require(msg.sender == pool, \\\"must be called by pool manager\\\");\\n    _;\\n  }\\n  function loan(address proxy, uint256 amount, uint256 getGas) public onlyPool returns (bool) {\\n    offset += amount;\\n    outstandingLoans[proxy] = amount;\\n    address[] memory path = new address[](2);\\n    path[0] = asset;\\n    path[1] = weth;\\n    uint256[] memory amounts = IUniswapV2Router01(router).swapTokensForExactETH(getGas, amount, path, pool, block.timestamp + 1);\\n    require(asset.sendToken(proxy, amount - amounts[0]), \\\"loan transfer failed\\\");\\n    return true;\\n  }\\n  function resolveLoan(address proxy) public onlyPool returns (bool) {\\n    offset -= outstandingLoans[proxy];\\n    outstandingLoans[proxy] = 0;\\n    return true;\\n  }\\n  function getReserve() internal view returns (uint256) {\\n    return offset + IERC20(asset).balanceOf(address(this));\\n  }\\n  function addLiquidity(uint256 value) public returns (uint256) {\\n    uint256 totalLiquidity = totalSupply();\\n    uint256 reserve = getReserve();\\n    uint256 totalMinted = value * (totalLiquidity == 0 ? 1 : totalLiquidity) / (reserve + 1);\\n    require(asset.transferTokenFrom(msg.sender, address(this), value), \\\"transfer token failed\\\");\\n    _mint(msg.sender, totalMinted);\\n    return totalMinted;\\n  }\\n  function removeLiquidity(uint256 value) public returns (uint256) {\\n    uint256 totalLiquidity = totalSupply();\\n    uint256 reserve = getReserve();\\n    uint256 totalReturned = value * (reserve + 1) / (totalLiquidity == 0 ? 1 : totalLiquidity);\\n    _burn(msg.sender, value);\\n    require(asset.sendToken(msg.sender, totalReturned), \\\"failed to send back token\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x0d1bf9a81b51f72664121de63da4b3982394a2f6d0e27be32aa7f50659bd2202\",\"license\":\"MIT\"},\"contracts/NullCloneConstructor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract NullCloneConstructor {\\n  function cloneConstructor(bytes memory consData) public {\\n    // do nothing\\n  }\\n}\\n\",\"keccak256\":\"0xd2f5fc0c88b5e8e60108ec09b25af5022d988661e2ef89f6dbecaafd34c38bad\",\"license\":\"MIT\"},\"contracts/ShifterBorrowProxy.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { TokenUtils } from \\\"./utils/TokenUtils.sol\\\";\\nimport { LiquidityToken } from \\\"./LiquidityToken.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeViewExecutor } from \\\"./utils/sandbox/SafeViewExecutor.sol\\\";\\nimport { SandboxLib } from \\\"./utils/sandbox/SandboxLib.sol\\\";\\nimport { StringLib } from \\\"./utils/StringLib.sol\\\";\\nimport { NullCloneConstructor } from \\\"./NullCloneConstructor.sol\\\";\\nimport { BorrowProxy } from \\\"./BorrowProxy.sol\\\";\\nimport { ShifterBorrowProxyLib } from \\\"./ShifterBorrowProxyLib.sol\\\";\\nimport { ShifterPool } from \\\"./ShifterPool.sol\\\";\\nimport { IShifter } from \\\"./interfaces/IShifter.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n\\ncontract ShifterBorrowProxy is BorrowProxy, SafeViewExecutor, NullCloneConstructor {\\n  using ShifterBorrowProxyLib for *;\\n  using StringLib for *;\\n  using SandboxLib for *;\\n  using TokenUtils for *;\\n  uint256 constant MINIMUM_GAS_CONTINUE = 5e5;\\n  function getShifter(address token) internal view returns (IShifter shifter) {\\n    shifter = ShifterPool(isolate.masterAddress).getShifterHandler(token);\\n  }\\n  function mint(ShifterBorrowProxyLib.TriggerParcel memory parcel) internal returns (uint256 amount) {\\n    amount = getShifter(parcel.record.request.token).mint(parcel.shiftParameters.pHash, parcel.shiftParameters.amount, parcel.computeNHash(), parcel.shiftParameters.darknodeSignature);\\n  }\\n  function _getGasReserved() internal view returns (uint256 result) {\\n    result = ShifterPool(isolate.masterAddress).getGasReserved(address(this));\\n  }\\n  function _payoutCallbackGas(address payable borrower, uint256 amount, uint256 originAmount) internal {\\n    if (amount != 0) ShifterPool(isolate.masterAddress).payoutCallbackGas(borrower, amount - originAmount, originAmount);\\n  }\\n  function repayLoan(bytes memory data) public returns (bool) {\\n    uint256 startGas = gasleft();\\n    (bool success, ShifterBorrowProxyLib.ProxyRecord memory record, address payable pool, uint256 repayAmount) = _repayLoan(data);\\n    if (maybeRelayResolveLoan(success, record, pool, repayAmount)) {\\n      ShifterBorrowProxyLib.emitShifterBorrowProxyRepaid(record.request.borrower, record);\\n      uint256 amount = _getGasReserved();\\n      uint256 originAmount = Math.min((gasleft() - startGas + 20000)*tx.gasprice, amount); // another estimate\\n      _payoutCallbackGas(record.request.borrower, amount, originAmount);\\n      return true;\\n    } else return false;\\n  }\\n  function _repayLoan(bytes memory data) internal returns (bool success, ShifterBorrowProxyLib.ProxyRecord memory record, address payable pool, uint256 repayAmount) {\\n    (ShifterBorrowProxyLib.TriggerParcel memory parcel) = data.decodeTriggerParcel();\\n    record = parcel.record;\\n    parcel.record.request.actions = new ShifterBorrowProxyLib.InitializationAction[](0);\\n    require(validateProxyRecord(parcel.record.encodeProxyRecord()), \\\"proxy record invalid\\\");\\n    require(!isolate.isLiquidating, \\\"proxy is being liquidated\\\");\\n    uint256 fee = parcel.record.computeAdjustedKeeperFee(parcel.record.expected);\\n    pool = isolate.masterAddress;\\n    uint256 amount;\\n    if (!isolate.isRepaying) {\\n      isolate.isRepaying = true;\\n      isolate.actualizedShift = amount = mint(parcel);\\n    } else amount = isolate.actualizedShift;\\n    address[] memory set = isolate.repaymentSet.set;\\n    for (uint256 i = isolate.repaymentIndex; i < set.length; i++) {\\n      if (gasleft() < MINIMUM_GAS_CONTINUE || !set[i].delegateRepay()) {\\n        isolate.repaymentIndex = i;\\n        return (false, record, pool, 0);\\n      }\\n    }\\n    isolate.unbound = true;\\n    require(parcel.record.request.token.sendToken(parcel.record.loan.keeper, fee), \\\"keeper payout failed\\\");\\n    record.request.amount = amount;\\n    repayAmount = amount - fee;\\n    success = true;\\n  }\\n  function relayMint(address shifter, address token, bytes32 pHash, uint256 amount, bytes32 nHash, bytes memory darknodeSignature, uint256 fee) public returns (bool) {\\n    require(isolate.masterAddress == msg.sender, \\\"must be called by shifter pool\\\");\\n    IShifter(shifter).mint(pHash, amount, nHash, darknodeSignature);\\n    if (fee != 0) require(token.sendToken(msg.sender, fee), \\\"failed to send token\\\");\\n    isolate.unbound = true;\\n  }\\n  function getBalanceOf(address token, address user) internal view returns (uint256) {\\n    return IERC20(token).balanceOf(user);\\n  }\\n  function getLiquidityToken(address payable pool, address token) internal view returns (address liqToken) {\\n    liqToken = address(ShifterPool(pool).getLiquidityTokenHandler(token));\\n  }\\n  function maybeRelayResolveLoan(bool success, ShifterBorrowProxyLib.ProxyRecord memory record, address payable pool, uint256 repayPool) internal returns (bool) {\\n    if (success) {\\n      address liqToken = getLiquidityToken(pool, record.request.token);\\n      require(record.request.token.sendToken(pool, repayPool), \\\"failed to approve pool for token transfer\\\");\\n      require(ShifterPool(pool).relayResolveLoan(record.request.token, liqToken, record.loan.keeper, record.loan.params.bond, repayPool, record.expected), \\\"loan resolution failure\\\");\\n      return true;\\n    }\\n    return false;\\n  }\\n  function defaultLoan(bytes memory data) public {\\n    (bool success, ShifterBorrowProxyLib.ProxyRecord memory record, address payable pool, uint256 postBalance) = _defaultLoan(data);\\n    maybeRelayResolveLoan(success, record, pool, postBalance);\\n    _payoutCallbackGas(record.request.borrower, 0, _getGasReserved());\\n    selfdestruct(msg.sender);\\n  }\\n  function _defaultLoan(bytes memory data) internal returns (bool success, ShifterBorrowProxyLib.ProxyRecord memory record, address payable pool, uint256 postBalance) {\\n    require(!isolate.isRepaying, \\\"loan being repaid\\\");\\n    require(!isolate.unbound, \\\"loan already repaid\\\");\\n    require(validateProxyRecord(data), \\\"proxy record invalid\\\");\\n    record = data.decodeProxyRecord();\\n    address[] memory set = isolate.liquidationSet.set;\\n    if (record.loan.params.timeoutExpiry >= block.number) {\\n      isolate.isLiquidating = true;\\n      for (uint256 i = isolate.liquidationIndex; i < set.length; i++) {\\n        if (gasleft() < MINIMUM_GAS_CONTINUE || !set[i].delegateLiquidate()) {\\n          isolate.liquidationIndex = i;\\n          return (false, record, pool, postBalance);\\n        }\\n      }\\n      isolate.liquidationIndex = set.length;\\n      pool = isolate.masterAddress;\\n      postBalance = getBalanceOf(record.request.token, address(this));\\n      success = true;\\n    } else {\\n      success = false;\\n    }\\n  }\\n  function receiveInitializationActions(ShifterBorrowProxyLib.InitializationAction[] memory actions) public {\\n    require(msg.sender == address(isolate.masterAddress), \\\"must be called from shifter pool\\\");\\n    actions.processActions();\\n  }\\n  fallback() external payable override {}\\n  receive() external payable override {}\\n}\\n\",\"keccak256\":\"0xb01f539c03bed87cc72d0ac4e5372cc87bd37229bb94912792165a05a3dd79c7\",\"license\":\"MIT\"},\"contracts/ShifterBorrowProxyFactoryLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport { ShifterBorrowProxy } from \\\"./ShifterBorrowProxy.sol\\\";\\nimport { ShifterPoolLib } from \\\"./ShifterPoolLib.sol\\\";\\nimport { FactoryLib } from \\\"./FactoryLib.sol\\\";\\n\\nlibrary ShifterBorrowProxyFactoryLib {\\n  function deployBorrowProxy(ShifterPoolLib.Isolate storage /* isolate */, bytes32 salt) external returns (address output) {\\n    output = Create2.deploy(0, salt, type(ShifterBorrowProxy).creationCode);\\n  }\\n  function deriveBorrowerAddress(address target, bytes32 salt) internal view returns (address) {\\n    return FactoryLib.deriveInstanceAddress(target, salt);\\n  }\\n}\\n\",\"keccak256\":\"0xbc44f1c42b4824efcef7b657671a325692245b8da64262222b065c67deafcf16\",\"license\":\"MIT\"},\"contracts/ShifterBorrowProxyLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { IInitializationActionsReceiver } from \\\"./interfaces/IInitializationActionsReceiver.sol\\\";\\nimport { ECDSA } from \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { BorrowProxy } from \\\"./BorrowProxy.sol\\\";\\nimport { BorrowProxyLib } from \\\"./BorrowProxyLib.sol\\\";\\nimport { TokenUtils } from \\\"./utils/TokenUtils.sol\\\";\\nimport { RevertCaptureLib } from \\\"./utils/RevertCaptureLib.sol\\\";\\nimport { SandboxLib } from \\\"./utils/sandbox/SandboxLib.sol\\\";\\nimport { IShifter } from \\\"./interfaces/IShifter.sol\\\";\\nimport { IShifterERC20 } from \\\"./interfaces/IShifterERC20.sol\\\";\\n\\nlibrary ShifterBorrowProxyLib {\\n  using SafeMath for *;\\n  using TokenUtils for *;\\n  struct ProxyRecord {\\n    LiquidityRequest request;\\n    LenderRecord loan;\\n    uint256 expected;\\n  }\\n  struct LiquidityRequest {\\n    address payable borrower;\\n    address token;\\n    bytes32 nonce;\\n    uint256 amount;\\n    bool forbidLoan;\\n    InitializationAction[] actions;\\n  }\\n  struct InitializationAction {\\n    address to;\\n    bytes txData;\\n  }\\n  event BorrowProxyInitialization(address indexed proxyAddress, SandboxLib.ProtectedExecution[]);\\n  function emitBorrowProxyInitialization(address /* proxyAddress */, SandboxLib.ProtectedExecution[] memory /* trace */) internal {\\n//    emit BorrowProxyInitialization(proxyAddress, trace);\\n  }\\n    \\n  function encodeProxyRecord(ProxyRecord memory record) internal pure returns (bytes memory result) {\\n    result = abi.encode(record);\\n  }\\n  function decodeProxyRecord(bytes memory record) internal pure returns (ProxyRecord memory result) {\\n    (result) = abi.decode(record, (ProxyRecord));\\n  }\\n  struct LiquidityRequestParcel {\\n    LiquidityRequest request;\\n    uint256 gasRequested;\\n    bytes signature;\\n  }\\n  function computeDepositAddress(LiquidityRequestParcel memory /* parcel */, address /* mpkh */, bool /* btcTestnet */) internal pure returns (string memory result) {\\n    result = \\\"\\\";\\n  }\\n  struct LenderParams {\\n    uint256 timeoutExpiry;\\n    uint256 bond;\\n    uint256 poolFee;\\n    uint256 keeperFee;\\n  }\\n  struct LenderRecord {\\n    address keeper;\\n    LenderParams params;\\n  }\\n  event ShifterBorrowProxyRepaid(address indexed user, ProxyRecord record);\\n  function emitShifterBorrowProxyRepaid(address user, ProxyRecord memory record) internal {\\n    emit ShifterBorrowProxyRepaid(user, record);\\n  }\\n  function encodeBorrowerMessage(LiquidityRequest memory params, bytes memory parcelActionsEncoded) internal pure returns (bytes memory result) {\\n    result = abi.encodePacked(params.borrower, params.token, params.nonce, params.amount, params.forbidLoan, parcelActionsEncoded);\\n  }\\n  function computeBorrowerSalt(LiquidityRequest memory params) internal pure returns (bytes32 result) {\\n    result = keccak256(computeBorrowerSaltPreimage(params));\\n  }\\n  function computeBorrowerSaltPreimage(LiquidityRequest memory params) internal pure returns (bytes memory result) {\\n    bytes memory parcelActionsEncoded = encodeParcelActions(params.actions);\\n    result = encodeBorrowerMessage(params, parcelActionsEncoded);\\n  }\\n  function encodeParcelActions(InitializationAction[] memory actions) internal pure returns (bytes memory retval) {\\n    retval = abi.encode(actions);\\n  }\\n  function computeLiquidityRequestParcelMessage(LiquidityRequestParcel memory parcel, bytes memory parcelActionsEncoded) internal view returns (bytes memory retval) {\\n    retval = abi.encodePacked(address(this), parcel.request.token, parcel.request.nonce, parcel.request.amount, parcel.gasRequested, parcel.request.forbidLoan, parcelActionsEncoded);\\n  }\\n  function computeLiquidityRequestPreimage(LiquidityRequestParcel memory parcel) internal view returns (bytes memory result) {\\n    bytes memory parcelActionsEncoded = encodeParcelActions(parcel.request.actions);\\n    result = computeLiquidityRequestParcelMessage(parcel, parcelActionsEncoded);\\n  }\\n  function computeLiquidityRequestHash(LiquidityRequestParcel memory parcel) internal view returns (bytes32 result) {\\n    result = keccak256(computeLiquidityRequestPreimage(parcel));\\n  }\\n  function validateSignature(LiquidityRequestParcel memory parcel, bytes32 hash) internal pure returns (bool) {\\n    return parcel.request.borrower == ECDSA.recover(ECDSA.toEthSignedMessageHash(hash), parcel.signature);\\n  }\\n  function validateSignature(LiquidityRequestParcel memory parcel) internal view returns (bool) {\\n    return parcel.request.borrower == ECDSA.recover(ECDSA.toEthSignedMessageHash(computeLiquidityRequestHash(parcel)), parcel.signature);\\n  }\\n  struct ShiftParameters {\\n    bytes32 txhash;\\n    uint256 vout;\\n    bytes32 pHash;\\n    uint256 amount;\\n    bytes darknodeSignature;\\n  }\\n  struct TriggerParcel {\\n    ProxyRecord record;\\n    ShiftParameters shiftParameters;\\n  }\\n  struct SansBorrowShiftParcel {\\n    LiquidityRequestParcel liquidityRequestParcel;\\n    ShiftParameters shiftParameters;\\n    InitializationAction[] actions;\\n  }\\n  function decodeTriggerParcel(bytes memory parcel) internal pure returns (TriggerParcel memory result) {\\n    (result) = abi.decode(parcel, (TriggerParcel));\\n  }\\n  function encodeNPreimage(TriggerParcel memory parcel) internal pure returns (bytes memory result) {\\n    result = abi.encodePacked(parcel.record.request.nonce, parcel.shiftParameters.txhash, parcel.shiftParameters.vout);\\n  }\\n  function computeNHash(TriggerParcel memory parcel) internal pure returns (bytes32) {\\n    return keccak256(encodeNPreimage(parcel));\\n  }\\n  uint256 constant BIPS_DENOMINATOR = 10000;\\n  function computeExpectedAmount(uint256 amount, address shifter, address token) internal returns (uint256 expected) {\\n    uint256 mintFee = getMintFee(shifter);\\n    uint256 underlyingAmount = getUnderlyingAmount(token, amount);\\n    uint256 fee = underlyingAmount.mul(mintFee).div(BIPS_DENOMINATOR);\\n    expected = underlyingAmount.sub(fee);\\n  }\\n  function getMintFee(address shifter) internal view returns (uint256 mintFee) {\\n    mintFee = uint256(IShifter(shifter).mintFee());\\n  }\\n  function getUnderlyingAmount(address token, uint256 amount) internal returns (uint256 underlyingAmount) {\\n    underlyingAmount = IShifterERC20(token).fromUnderlying(amount);\\n  }\\n  function computePostFee(ProxyRecord memory record) internal pure returns (uint256) {\\n    return record.expected.sub(computePoolFee(record).add(computeKeeperFee(record)));\\n  }\\n  function computePoolFee(ProxyRecord memory record) internal pure returns (uint256) {\\n    return record.expected.mul(record.loan.params.poolFee).div(uint256(1 ether));\\n  }\\n  function computeKeeperFee(ProxyRecord memory record) internal pure returns (uint256) {\\n    return record.expected.mul(record.loan.params.keeperFee).div(uint256(1 ether));\\n  }\\n  function computeAdjustedKeeperFee(ProxyRecord memory record, uint256 actual) internal pure returns (uint256) {\\n    return actual.mul(record.loan.params.keeperFee).div(uint256(1 ether));\\n  }\\n}\\n\",\"keccak256\":\"0x974cd03066104f482be120f08df210b740c6262207e249850db2374ed48d1a97\",\"license\":\"MIT\"},\"contracts/ShifterPool.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IShifterRegistry } from \\\"./interfaces/IShifterRegistry.sol\\\";\\nimport { IShifter } from \\\"./interfaces/IShifter.sol\\\";\\nimport { ShifterPoolLib } from \\\"./ShifterPoolLib.sol\\\";\\nimport { ShifterBorrowProxyLib } from \\\"./ShifterBorrowProxyLib.sol\\\";\\nimport { ShifterBorrowProxyFactoryLib } from \\\"./ShifterBorrowProxyFactoryLib.sol\\\";\\nimport { ShifterBorrowProxy } from \\\"./ShifterBorrowProxy.sol\\\";\\nimport { BorrowProxy } from \\\"./BorrowProxy.sol\\\";\\nimport { BorrowProxyLib } from \\\"./BorrowProxyLib.sol\\\";\\nimport { TokenUtils } from \\\"./utils/TokenUtils.sol\\\";\\nimport { ViewExecutor } from \\\"./utils/ViewExecutor.sol\\\";\\nimport { LiquidityToken } from \\\"./LiquidityToken.sol\\\";\\nimport { SandboxLib } from \\\"./utils/sandbox/SandboxLib.sol\\\";\\nimport { SafeViewExecutor } from \\\"./utils/sandbox/SafeViewExecutor.sol\\\";\\nimport { FactoryLib } from \\\"./FactoryLib.sol\\\";\\nimport { NullCloneConstructor } from \\\"./NullCloneConstructor.sol\\\";\\nimport { AssetForwarderLib } from \\\"./adapters/lib/AssetForwarderLib.sol\\\";\\nimport { AssetForwarder } from \\\"./adapters/lib/AssetForwarder.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { StringLib } from \\\"./utils/StringLib.sol\\\";\\nimport { ExtLib } from \\\"./utils/ExtLib.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n\\ncontract ShifterPool is Ownable, SafeViewExecutor, NullCloneConstructor {\\n  using SandboxLib for *;\\n  using SafeMath for *;\\n  using ShifterPoolLib for *;\\n  using TokenUtils for *;\\n  using StringLib for *;\\n  using ExtLib for *;\\n  using ShifterBorrowProxyLib for *;\\n  using ShifterBorrowProxyFactoryLib for *;\\n  using BorrowProxyLib for *;\\n  ShifterPoolLib.Isolate isolate;\\n  constructor() Ownable() public {\\n    isolate.genesis = block.number;\\n  }\\n  function setup(ShifterPoolLib.SetupParams memory params, BorrowProxyLib.ModuleDetails[] memory moduleDetails, BorrowProxyLib.Module[] memory modules, ShifterPoolLib.LiquidityTokenLaunch[] memory tokenLaunches) public onlyOwner {\\n    require(modules.length == moduleDetails.length, \\\"can't zip module registations: modules.length != moduleDetails.length\\\");\\n    isolate.shifterRegistry = params.shifterRegistry;\\n    isolate.maxLoan = params.maxLoan;\\n    isolate.minTimeout = params.minTimeout;\\n    isolate.poolFee = params.poolFee;\\n    isolate.daoFee = params.daoFee;\\n    isolate.gasEstimate = params.gasEstimate;\\n    isolate.maxGasPriceForRefund = params.maxGasPriceForRefund;\\n    for (uint256 i = 0; i < modules.length; i++) {\\n      BorrowProxyLib.ModuleRegistration memory registration = BorrowProxyLib.ModuleRegistration({\\n        module: modules[i],\\n        target: moduleDetails[i].target,\\n        sigs: moduleDetails[i].sigs,\\n        moduleType: moduleDetails[i].moduleType\\n      });\\n      isolate.registry.registryRegisterModule(registration);\\n    }\\n    for (uint256 i = 0; i < tokenLaunches.length; i++) {\\n      ShifterPoolLib.LiquidityTokenLaunch memory launch = tokenLaunches[i];\\n      isolate.tokenToLiquidityToken[launch.token] = launch.liqToken;\\n      isolate.tokenToBaseFee[launch.token] = launch.baseFee;\\n    }\\n  }\\n  function getGasReserved(address proxyAddress) view public returns (uint256) {\\n    return isolate.gasReserved[proxyAddress];\\n  }\\n  function payoutCallbackGas(address payable borrower, uint256 amountBorrower, uint256 amountOrigin) public {\\n    if (amountOrigin != 0) tx.origin.send(amountOrigin);\\n    if (amountBorrower != 0) borrower.send(amountBorrower);\\n  }\\n  function getLiquidityTokenForTokenHandler(address token) public view returns (address) {\\n    return isolate.tokenToLiquidityToken[token];\\n  }\\n  bytes32 constant BORROW_PROXY_IMPLEMENTATION_SALT = 0xfe1e3164ba4910db3c9afd049cd8feb4552390569c846692e6df4ac68aeaa90e;\\n  function deployBorrowProxyImplementation() public {\\n    require(isolate.borrowProxyImplementation == address(0x0), \\\"already deployed\\\");\\n    isolate.borrowProxyImplementation = isolate.makeBorrowProxy(BORROW_PROXY_IMPLEMENTATION_SALT);\\n    address payable borrowProxyImplementation = address(uint160(isolate.borrowProxyImplementation));\\n//    borrowProxyImplementation.setupBorrowProxy(address(0x1), address(0x1), false);\\n  }\\n  function computeProxyAddress(bytes32 salt) public view returns (address) {\\n    return isolate.borrowProxyImplementation.deriveBorrowerAddress(salt);\\n  }\\n  function deployAssetForwarderImplementation() public {\\n    require(isolate.assetForwarderImplementation == address(0x0), \\\"already deployed\\\");\\n    isolate.assetForwarderImplementation = AssetForwarderLib.deployAssetForwarder();\\n    AssetForwarder(isolate.assetForwarderImplementation).lock();\\n  }\\n\\n  function deployAssetForwarderClone(bytes32 salt) public returns (address created) {\\n\\n    created = FactoryLib.create2Clone(isolate.assetForwarderImplementation, uint256(keccak256(abi.encodePacked(AssetForwarderLib.GET_ASSET_FORWARDER_IMPLEMENTATION_SALT(), msg.sender, salt))));\\n\\n  }\\n  function getAssetForwarderImplementationHandler() public view returns (address implementation) {\\n    return isolate.assetForwarderImplementation;\\n  }\\n  function deployBorrowProxyClone(bytes32 salt) internal returns (address payable created) {\\n    created = address(uint160(FactoryLib.create2Clone(isolate.borrowProxyImplementation, uint256(salt))));\\n  }\\n  function validateUnderMaxLoan(ShifterBorrowProxyLib.LiquidityRequestParcel memory parcel) internal view returns (bool) {\\n    uint8 decimals = ERC20(parcel.request.token).decimals();\\n    require(decimals <= 18, \\\"the token supplied is not a shifter token -- decimals too high\\\");\\n    require(parcel.request.amount / 10**(18 - uint256(decimals)) <= isolate.maxLoan, \\\"loan exceeds maximum\\\");\\n  }\\n  function _executeBorrow(ShifterPoolLib.BorrowState memory state, ShifterBorrowProxyLib.LiquidityRequestParcel memory liquidityRequestParcel, uint256 bond, uint256 timeoutExpiry) internal returns (address payable proxyAddress) {\\n    require(liquidityRequestParcel.request.forbidLoan == false, \\\"is not a loan request, try using executeShiftSansBorrow\\\");\\n    require(\\n      liquidityRequestParcel.gasRequested == msg.value,\\n      \\\"supplied ether is not equal to gas requested\\\"\\n  \\n    );\\n    require(\\n      liquidityRequestParcel.validateSignature(\\n        liquidityRequestParcel.computeLiquidityRequestHash()\\n      ),\\n      \\\"liquidity request signature rejected\\\"\\n    );\\n    ShifterBorrowProxyLib.LiquidityRequest memory liquidityRequest = liquidityRequestParcel.request;\\n    bytes32 borrowerSalt = liquidityRequest.computeBorrowerSalt();\\n    liquidityRequest.actions = new ShifterBorrowProxyLib.InitializationAction[](0);\\n    ShifterBorrowProxyLib.ProxyRecord memory proxyRecord = ShifterBorrowProxyLib.ProxyRecord({\\n      request: liquidityRequest,\\n      loan: ShifterBorrowProxyLib.LenderRecord(\\n        msg.sender,\\n        isolate.computeLoanParams(liquidityRequest.amount, bond, timeoutExpiry)\\n      ),\\n      expected: liquidityRequest.amount.computeExpectedAmount(address(isolate.getShifter(liquidityRequest.token)), liquidityRequest.token).sub(isolate.tokenToBaseFee[liquidityRequest.token])\\n    });\\n    proxyAddress = address(uint160(deployBorrowProxyClone(borrowerSalt)));\\n    ShifterPoolLib.mapBorrowProxy(isolate, proxyAddress, proxyRecord);\\n    isolate.issueLoan(liquidityRequest.token, proxyAddress, proxyRecord.computePostFee(), state.refundAmount);\\n    require(liquidityRequest.token.transferTokenFrom(msg.sender, address(this), bond), \\\"bond submission failed\\\");\\n  }\\n  function executeBorrow(ShifterBorrowProxyLib.LiquidityRequestParcel memory liquidityRequestParcel, uint256 bond, uint256 timeoutExpiry) public payable {\\n    ShifterPoolLib.BorrowState memory state = ShifterPoolLib.BorrowState({\\n      refundAmount: 0,\\n      gasPrice: Math.min(isolate.maxGasPriceForRefund, tx.gasprice),\\n      startGas: gasleft()\\n    });\\n    state.refundAmount = state.gasPrice*isolate.gasEstimate;\\n    require(isolate.isKeeper[msg.sender], \\\"only can be called by keeper\\\");\\n    ShifterBorrowProxyLib.InitializationAction[] memory actions = liquidityRequestParcel.request.actions;\\n    validateUnderMaxLoan(liquidityRequestParcel);\\n    address payable proxyAddress = _executeBorrow(state, liquidityRequestParcel, bond, timeoutExpiry);\\n    proxyAddress.setupBorrowProxy(liquidityRequestParcel.request.borrower, liquidityRequestParcel.request.token, false);\\n    proxyAddress.sendInitializationActions(actions);\\n    state.startGas = Math.min(state.refundAmount, (state.startGas - gasleft()  + 8600)*state.gasPrice); // estimate 10000 for additional gas, should be close\\n    tx.origin.transfer(state.startGas); // just reuse this memory loc, startGas becomes total amount refunded\\n    isolate.gasReserved[proxyAddress] = state.refundAmount - state.startGas;\\n  }\\n  function setKeeper(address user, bool isKeeper) public onlyOwner {\\n    isolate.isKeeper[user] = isKeeper;\\n  }\\n  function executeShiftSansBorrow(ShifterBorrowProxyLib.SansBorrowShiftParcel memory parcel) public payable {\\n    (address payable proxyAddress, ShifterBorrowProxyLib.InitializationAction[] memory actions) = _executeShiftSansBorrow(parcel);\\n    if (actions.length != 0) proxyAddress.sendInitializationActions(actions);\\n  }\\n  function _executeShiftSansBorrow(ShifterBorrowProxyLib.SansBorrowShiftParcel memory parcel) internal returns (address payable proxyAddress, ShifterBorrowProxyLib.InitializationAction[] memory actions) {\\n    ShifterBorrowProxyLib.TriggerParcel memory triggerParcel = ShifterBorrowProxyLib.TriggerParcel({\\n      record: ShifterBorrowProxyLib.ProxyRecord({\\n        expected: parcel.liquidityRequestParcel.request.amount,\\n        request: parcel.liquidityRequestParcel.request,\\n        loan: ShifterBorrowProxyLib.LenderRecord({\\n          keeper: msg.sender,\\n          params: isolate.computeLoanParams(parcel.liquidityRequestParcel.request.amount, parcel.liquidityRequestParcel.request.amount / 10, 1000)\\n        })\\n      }),\\n      shiftParameters: ShifterBorrowProxyLib.ShiftParameters({\\n        txhash: parcel.shiftParameters.txhash,\\n        amount: parcel.shiftParameters.amount,\\n        vout: parcel.shiftParameters.vout,\\n        pHash: parcel.shiftParameters.pHash,\\n        darknodeSignature: parcel.shiftParameters.darknodeSignature\\n      })\\n    });\\n    require(\\n      parcel.liquidityRequestParcel.validateSignature(\\n        parcel.liquidityRequestParcel.computeLiquidityRequestHash()\\n      ),\\n      \\\"liquidity request signature rejected\\\"\\n    );\\n    bytes32 borrowerSalt = parcel.liquidityRequestParcel.request.computeBorrowerSalt();\\n    proxyAddress = address(uint160(isolate.borrowProxyImplementation.deriveBorrowerAddress(borrowerSalt)));\\n    require(!proxyAddress.isContract(), \\\"proxy has already been initialized\\\");\\n    isolate.borrowProxyController.mapProxyRecord(proxyAddress, abi.encodePacked(uint256(1)));\\n    uint256 fee = triggerParcel.record.computeAdjustedKeeperFee(parcel.shiftParameters.amount);\\n    deployBorrowProxyClone(borrowerSalt);\\n    proxyAddress.setupBorrowProxy(parcel.liquidityRequestParcel.request.borrower, parcel.liquidityRequestParcel.request.token, true);\\n    if (parcel.liquidityRequestParcel.request.borrower != msg.sender && msg.value == parcel.liquidityRequestParcel.gasRequested) {\\n      parcel.liquidityRequestParcel.request.borrower.transfer(msg.value);\\n      ShifterPoolLib.sendMint(proxyAddress, address(isolate.getShifter(parcel.liquidityRequestParcel.request.token)), parcel, triggerParcel.computeNHash(), fee);\\n      require(parcel.liquidityRequestParcel.request.token.sendToken(msg.sender, fee), \\\"keeper payout failed\\\");\\n      actions = parcel.liquidityRequestParcel.request.actions;\\n    } else if (parcel.liquidityRequestParcel.request.borrower == msg.sender) {\\n      ShifterPoolLib.sendMint(proxyAddress, address(isolate.getShifter(parcel.liquidityRequestParcel.request.token)), parcel, triggerParcel.computeNHash(), 0);\\n      actions = parcel.actions;\\n    }\\n\\n    else revert(\\\"incorrect gas supplied with gas requested\\\");\\n  }\\n  function validateProxyRecordHandler(bytes memory proxyRecord) public view returns (bool) {\\n    return isolate.borrowProxyController.validateProxyRecord(msg.sender, proxyRecord);\\n  }\\n  function getProxyTokenHandler(address proxyAddress) public view returns (address) {\\n    return isolate.borrowProxyController.getProxyToken(proxyAddress);\\n  }\\n  function getProxyOwnerHandler(address user) public view returns (address) {\\n    return isolate.borrowProxyController.getProxyOwner(user);\\n  }\\n  function getShifterHandler(address token) public view returns (IShifter) {\\n    return isolate.getShifter(token);\\n  }\\n  function getLiquidityTokenHandler(address token) public view returns (LiquidityToken) {\\n    return LiquidityToken(isolate.getLiquidityToken(token));\\n  }\\n  function fetchModuleHandler(address to, bytes4 sig) public view returns (BorrowProxyLib.Module memory) {\\n    return isolate.registry.resolveModule(to, sig);\\n  }\\n  function relayResolveLoan(address token, address liquidityToken, address keeper, uint256 bond, uint256 repay, uint256 originalAmount) public returns (bool) {\\n    require(isolate.borrowProxyController.proxyInitializerRecord[msg.sender] != bytes32(0x0), \\\"not a registered borrow proxy\\\");\\n    if (repay < originalAmount) {\\n      if (repay + bond < originalAmount) {\\n        repay = repay + bond;\\n        bond = 0;\\n      } else {\\n        bond -= originalAmount - repay;\\n        repay = originalAmount;\\n      }\\n    }\\n    if (bond != 0) require(token.sendToken(keeper, bond), \\\"failed to return bond to keeper\\\");\\n    if (repay != 0) {\\n       (uint256 amount, uint256 daoAmount) = ShifterPoolLib.splitForDAO(repay, isolate.daoFee);\\n       require(token.sendToken(liquidityToken, amount), \\\"failed to repay lost funds\\\");\\n       require(token.sendToken(owner(), daoAmount), \\\"failed to repay the governing DAO\\\");\\n    }\\n    require(LiquidityToken(liquidityToken).resolveLoan(msg.sender), \\\"loan resolution failure\\\");\\n    return true;\\n  }\\n  receive() external payable { }\\n}\\n\",\"keccak256\":\"0x05fa02498f26032b84151eefbafadaca002e5a99c51f34995a292b07cbdc2db7\",\"license\":\"MIT\"},\"contracts/ShifterPoolLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { ECDSA } from \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport { TokenUtils } from \\\"./utils/TokenUtils.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { BorrowProxyLib } from \\\"./BorrowProxyLib.sol\\\";\\nimport { IShifter } from \\\"./interfaces/IShifter.sol\\\";\\nimport { IShifterRegistry } from \\\"./interfaces/IShifterRegistry.sol\\\";\\nimport { LiquidityToken } from \\\"./LiquidityToken.sol\\\";\\nimport { ShifterBorrowProxy } from \\\"./ShifterBorrowProxy.sol\\\";\\nimport { ShifterBorrowProxyLib } from \\\"./ShifterBorrowProxyLib.sol\\\";\\nimport { ShifterBorrowProxyFactoryLib } from \\\"./ShifterBorrowProxyFactoryLib.sol\\\";\\nimport { FactoryLib } from \\\"./FactoryLib.sol\\\";\\nimport { ShifterPool } from \\\"./ShifterPool.sol\\\";\\nimport { AssetForwarderLib } from \\\"./adapters/lib/AssetForwarderLib.sol\\\";\\n\\nlibrary ShifterPoolLib {\\n  using BorrowProxyLib for *;\\n  using TokenUtils for *;\\n  using ShifterBorrowProxyLib for *;\\n  using ShifterBorrowProxyFactoryLib for *;\\n  using SafeMath for *;\\n  struct SetupParams {\\n    address shifterRegistry;\\n    uint256 minTimeout;\\n    uint256 poolFee;\\n    uint256 daoFee;\\n    uint256 maxLoan;\\n    uint256 gasEstimate;\\n    uint256 maxGasPriceForRefund;\\n  }\\n  struct BorrowState {\\n    uint256 startGas;\\n    uint256 gasPrice;\\n    uint256 refundAmount;\\n  }\\n  struct Isolate {\\n    uint256 genesis;\\n    address borrowProxyImplementation;\\n    address assetForwarderImplementation;\\n    address shifterRegistry;\\n    uint256 minTimeout;\\n    uint256 poolFee;\\n    uint256 daoFee;\\n    uint256 maxLoan;\\n    uint256 gasEstimate;\\n    uint256 maxGasPriceForRefund;\\n    mapping (address => uint256) gasReserved;\\n    mapping (address => bool) isKeeper;\\n    mapping (bytes32 => bool) provisionExecuted;\\n    mapping (address => address) tokenToLiquidityToken;\\n    mapping (address => uint256) tokenToBaseFee;\\n    BorrowProxyLib.ControllerIsolate borrowProxyController;\\n    BorrowProxyLib.ModuleRegistry registry;\\n  }\\n  function splitForDAO(uint256 actualAmount, uint256 daoFee) internal pure returns (uint256 amount, uint256 daoAmount) {\\n    daoAmount = actualAmount.mul(uint256(daoFee)).div(uint256(1 ether));\\n    if (daoAmount < actualAmount) {\\n      amount = actualAmount - daoAmount;\\n    } else daoAmount = actualAmount;\\n  }\\n  function deployAssetForwarder(BorrowProxyLib.ProxyIsolate storage isolate, bytes32 salt) internal returns (address created) {\\n    return ShifterPool(isolate.masterAddress).deployAssetForwarderClone(salt);\\n  }\\n  function sendMint(address proxyAddress, address shifter, ShifterBorrowProxyLib.SansBorrowShiftParcel memory parcel, bytes32 nHash, uint256 fee) internal  {\\n    ShifterBorrowProxy(address(uint160(proxyAddress))).relayMint(shifter, parcel.liquidityRequestParcel.request.token, parcel.shiftParameters.pHash, parcel.shiftParameters.amount, nHash, parcel.shiftParameters.darknodeSignature, fee);\\n  }\\n  function makeBorrowProxy(Isolate storage isolate, bytes32 salt) internal returns (address payable proxyAddress) {\\n    proxyAddress = address(uint160(isolate.deployBorrowProxy(salt)));\\n  }\\n  function issueLoan(Isolate storage isolate, address token, address payable proxyAddress, uint256 fee, uint256 getGas) internal {\\n    require(LiquidityToken(getLiquidityToken(isolate, token)).loan(proxyAddress, fee, getGas), \\\"insufficient funds in liquidity pool\\\");\\n  }\\n  function setupBorrowProxy(address payable proxyAddress, address borrower, address token, bool unbound) internal {\\n    require(ShifterBorrowProxy(proxyAddress).setup(borrower, token, unbound), \\\"setup phase failure\\\");\\n  }\\n  function sendInitializationActions(address payable proxyAddress, ShifterBorrowProxyLib.InitializationAction[] memory actions) internal {\\n    ShifterBorrowProxy(proxyAddress).receiveInitializationActions(actions);\\n  }\\n  function computeLoanParams(Isolate storage isolate, uint256 amount, uint256 bond, uint256 timeoutExpiry) internal view returns (ShifterBorrowProxyLib.LenderParams memory) {\\n    require(timeoutExpiry >= isolate.minTimeout, \\\"timeout insufficient\\\");\\n    uint256 baseKeeperFee = uint256(1 ether).div(100); // 1%\\n    require(bond.mul(uint256(1 ether)).div(amount) > uint256(1 ether).div(100), \\\"bond below minimum\\\");\\n    uint256 keeperFee = amount < bond ? baseKeeperFee : uint256(baseKeeperFee).mul(bond).div(amount);\\n    return ShifterBorrowProxyLib.LenderParams({\\n      keeperFee: keeperFee,\\n      poolFee: isolate.poolFee,\\n      timeoutExpiry: block.number + timeoutExpiry,\\n      bond: bond\\n    });\\n  }\\n  struct LiquidityProvisionMessage {\\n    uint256 amount;\\n    uint256 nonce;\\n    uint256 keeperFee;\\n    uint256 timeoutExpiry;\\n    bytes signature;\\n  }\\n  struct LiquidityTokenLaunch {\\n    address token;\\n    address liqToken;\\n    uint256 baseFee;\\n  }\\n  function launchLiquidityToken(Isolate storage isolate, address weth, address router, address token, string memory name, string memory symbol, uint8 decimals) internal returns (address) {\\n    require(isolate.tokenToLiquidityToken[token] == address(0x0), \\\"already deployed liquidity token for target token\\\");\\n    address liquidityToken = address(new LiquidityToken(weth, router, address(uint160(address(this))), token, name, symbol, decimals));\\n    isolate.tokenToLiquidityToken[token] = liquidityToken;\\n    return liquidityToken;\\n  }\\n  function getLiquidityToken(Isolate storage isolate, address token) internal view returns (address) {\\n    address retval = isolate.tokenToLiquidityToken[token];\\n    require(retval != address(0x0), \\\"not a registered liquidity token\\\");\\n    return retval;\\n  }\\n  function lendLiquidity(Isolate storage isolate, address provider, address token, address target, uint256 amount) internal returns (bool) {\\n    if (!isolate.isKeeper[provider]) return false;\\n    return token.transferTokenFrom(provider, target, amount);\\n  }\\n  function getShifter(Isolate storage isolate, address token) internal view returns (IShifter) {\\n    return IShifterRegistry(isolate.shifterRegistry).getGatewayByToken(token);\\n  }\\n  function provisionHashAlreadyUsed(Isolate storage isolate, bytes32 provisionHash) internal view returns (bool) {\\n    return isolate.provisionExecuted[provisionHash];\\n  }\\n  function preventProvisionReplay(Isolate storage isolate, bytes32 provisionHash) internal returns (bool) {\\n    isolate.provisionExecuted[provisionHash] = true;\\n    return true;\\n  }\\n  function mapBorrowProxy(Isolate storage isolate, address proxyAddress, ShifterBorrowProxyLib.ProxyRecord memory record) internal {\\n    bytes memory data = record.encodeProxyRecord();\\n    isolate.borrowProxyController.setProxyToken(proxyAddress, record.request.token);\\n    isolate.borrowProxyController.setProxyOwner(proxyAddress, record.request.borrower);\\n    record.request.borrower.transfer(msg.value);\\n    isolate.borrowProxyController.mapProxyRecord(proxyAddress, data);\\n    BorrowProxyLib.emitBorrowProxyMade(record.request.borrower, proxyAddress, data);\\n  }\\n}   \\n\",\"keccak256\":\"0xcfc0caf1ef935221855162c473f404ca96dfb89dc49ff1b3c2c39d33d09d7d6f\",\"license\":\"MIT\"},\"contracts/adapters/lib/AssetForwarder.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { TokenUtils } from \\\"../../utils/TokenUtils.sol\\\";\\n\\ncontract AssetForwarder {\\n  using TokenUtils for *;\\n  bool public locked;\\n  function lock() public {\\n    locked = true;\\n  }\\n  function forwardAsset(address payable target, address token) public payable {\\n    require(!locked);\\n    if (token != address(0x0)) require(token.sendToken(target, IERC20(token).balanceOf(address(this))), \\\"erc20 forward failure\\\");\\n    selfdestruct(target);\\n  }\\n}\\n\",\"keccak256\":\"0x45affa7770bfb273f439176f5189c686491db71a9be4ef390abf112c9ba4cf3f\",\"license\":\"MIT\"},\"contracts/adapters/lib/AssetForwarderLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { AssetForwarder } from \\\"./AssetForwarder.sol\\\";\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport { FactoryLib } from \\\"../../FactoryLib.sol\\\";\\nimport { ShifterPool } from \\\"../../ShifterPool.sol\\\";\\n\\nlibrary AssetForwarderLib {\\n  bytes32 constant ASSET_FORWARDER_IMPLEMENTATION_SALT = 0x6b6f6b75258f8f4cdb6ef275682bc2be3e8b970e5e4417113bd1ea53622d907e; // keccak(\\\"asset-forwarder-implementation\\\")\\n  function GET_ASSET_FORWARDER_IMPLEMENTATION_SALT() internal pure returns (bytes32) {\\n    return ASSET_FORWARDER_IMPLEMENTATION_SALT;\\n  }\\n  function deployAssetForwarder() internal returns (address output) {\\n    output = Create2.deploy(0, ASSET_FORWARDER_IMPLEMENTATION_SALT, type(AssetForwarder).creationCode);\\n  }\\n  function deployAssetForwarderClone(address target, bytes32 salt) internal returns (address output) {\\n    output = FactoryLib.create2Clone(target, uint256(salt));\\n  }\\n  function deriveAssetForwarderAddress(address payable shifterPool, address from, bytes32 salt) internal view returns (address) {\\n    return FactoryLib.deriveInstanceAddress(shifterPool, ShifterPool(shifterPool).getAssetForwarderImplementationHandler(), keccak256(abi.encodePacked(GET_ASSET_FORWARDER_IMPLEMENTATION_SALT(), from, salt)));\\n  }\\n}\\n\",\"keccak256\":\"0xd34ee10bb6e0a76bad8a90786915836fa9f11c1ca46091ca3bd19a0e5a1b398b\",\"license\":\"MIT\"},\"contracts/adapters/lib/ModuleLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { SliceLib } from \\\"../../utils/SliceLib.sol\\\";\\n\\ninterface IModule {\\n  function handle(ModuleLib.AssetSubmodulePayload calldata) external payable;\\n}\\n\\nlibrary ModuleLib {\\n  address payable constant ETHER_ADDRESS = 0x0000000000000000000000000000000000000000;\\n  function GET_ETHER_ADDRESS() internal pure returns (address payable) {\\n    return ETHER_ADDRESS;\\n  }\\n  function cast(uint256 v) internal pure returns (uint256) {\\n    return v;\\n  }\\n  function splitPayload(bytes memory payload) internal pure returns (bytes4 sig, bytes memory args) {\\n    sig = bytes4(uint32(uint256(SliceLib.asWord(SliceLib.toSlice(payload, 0, 4)))));\\n    args = SliceLib.copy(SliceLib.toSlice(payload, 4));\\n  }\\n  struct AssetSubmodulePayload {\\n    address payable moduleAddress;\\n    address liquidationSubmodule;\\n    address repaymentSubmodule;\\n    address payable token;\\n    address payable txOrigin;\\n    address payable to;\\n    uint256 value;\\n    bytes callData;\\n  }\\n  function encodeWithSelector(AssetSubmodulePayload memory input) internal pure returns (bytes memory result) {\\n    result = abi.encodeWithSelector(IModule.handle.selector, input);\\n  }\\n  function bubbleResult(bool success, bytes memory retval) internal pure {\\n    assembly {\\n      if iszero(success) {\\n        revert(add(0x20, retval), mload(retval))\\n      }\\n      return(add(0x20, retval), mload(retval))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x03885b4abdb3ce947222c3b8b8c6ab0ee3f34e9f4bcd6dea723c8eecb7de69d5\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowProxyController.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IBorrowProxyController {\\n  function getProxyOwnerHandler() external returns (address);\\n  function validateProxyRecordHandler(bytes calldata) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7b767728648d1fe8fff17648e5b8791b3939d6de13c27f6d7e12b14fbccca381\",\"license\":\"MIT\"},\"contracts/interfaces/IInitializationActionsReceiver.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { SandboxLib } from \\\"../utils/sandbox/SandboxLib.sol\\\";\\nimport { ShifterBorrowProxyLib } from \\\"../ShifterBorrowProxyLib.sol\\\";\\n\\ninterface IInitializationActionsReceiver {\\n  function receiveInitializationActions(ShifterBorrowProxyLib.InitializationAction[] calldata actions) external returns (SandboxLib.Context memory context);\\n}\\n\",\"keccak256\":\"0x3b99602cbca2e9a92feae53362b85b47541d1e47ea4e283a78c08001b152d8f1\",\"license\":\"MIT\"},\"contracts/interfaces/IModuleRegistryProvider.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { BorrowProxyLib } from \\\"../BorrowProxyLib.sol\\\";\\n\\ninterface IModuleRegistryProvider {\\n  function fetchModuleHandler(address to, bytes4 sig) external returns (BorrowProxyLib.Module memory);\\n}\\n\",\"keccak256\":\"0x792268c81b8385756e08f08699301caf506a887c2c899d069b25cfeb4341e1f6\",\"license\":\"MIT\"},\"contracts/interfaces/IShifter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IShifter {\\n  function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) external returns (uint256);\\n  function mintFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x26475c55e8f35728e04b0b61a5dbaca020f9ce02bbac1d02b0ddf2ff4fdcadf7\",\"license\":\"MIT\"},\"contracts/interfaces/IShifterERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IShifterERC20 {\\n  function fromUnderlying(uint256 amount) external returns (uint256);\\n}\\n  \\n\",\"keccak256\":\"0x7bcb210ac3d6e55d793b9f16c24defd8bd32337f94f9ae25bc49124f7efcdd09\",\"license\":\"MIT\"},\"contracts/interfaces/IShifterRegistry.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { IShifter } from \\\"./IShifter.sol\\\";\\n\\ninterface IShifterRegistry {\\n  function getGatewayByToken(address _tokenAddress) external view returns (IShifter);\\n}\\n\",\"keccak256\":\"0xd6100563bcc2fa8314d90fd99c87562bfa2742e688b7c0b37ddc1b2caccb2079\",\"license\":\"MIT\"},\"contracts/preprocessors/lib/PreprocessorLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { SandboxLib } from \\\"../../utils/sandbox/SandboxLib.sol\\\";\\nimport { ShifterBorrowProxyLib } from \\\"../../ShifterBorrowProxyLib.sol\\\";\\n\\nlibrary PreprocessorLib {\\n  function toContext(bytes memory input) internal pure returns (SandboxLib.ExecutionContext memory) {\\n    return SandboxLib.toContext(input);\\n  }\\n  function then(ShifterBorrowProxyLib.InitializationAction memory action, ShifterBorrowProxyLib.InitializationAction memory nextAction) internal pure returns (ShifterBorrowProxyLib.InitializationAction[] memory result) {\\n    result = new ShifterBorrowProxyLib.InitializationAction[](2);\\n    result[0] = action;\\n    result[1] = nextAction;\\n  }\\n  function getLastExecution(SandboxLib.Context memory context) internal pure returns (bool foundLast, SandboxLib.ProtectedExecution memory execution) {\\n    if (context.trace.length == 0) return (foundLast, execution);\\n    SandboxLib.ProtectedExecution[] memory lastBatch = context.trace[context.trace.length - 1];\\n    execution = lastBatch[lastBatch.length - 1];\\n  }\\n  function then(ShifterBorrowProxyLib.InitializationAction[] memory actions, ShifterBorrowProxyLib.InitializationAction[] memory nextActions) internal pure returns (ShifterBorrowProxyLib.InitializationAction[] memory result) {\\n    result = new ShifterBorrowProxyLib.InitializationAction[](actions.length + nextActions.length);\\n    uint256 i = 0;\\n    for (; i < actions.length; i++) {\\n      result[i] = actions[i];\\n    }\\n    for (uint256 j = 0; j < nextActions.length; j++) {\\n      result[i] = nextActions[j];\\n      i++;\\n    }\\n  }\\n  function then(ShifterBorrowProxyLib.InitializationAction[] memory actions, ShifterBorrowProxyLib.InitializationAction memory nextAction) internal pure returns (ShifterBorrowProxyLib.InitializationAction[] memory result) {\\n    result = then(actions, toList(nextAction));\\n  }\\n  function toList(ShifterBorrowProxyLib.InitializationAction memory input) internal pure returns (ShifterBorrowProxyLib.InitializationAction[] memory result) {\\n    result = new ShifterBorrowProxyLib.InitializationAction[](1);\\n    result[0] = input;\\n  }\\n  function sendTransaction(address to, bytes memory txData) internal pure returns (ShifterBorrowProxyLib.InitializationAction[] memory result) {\\n    return toList(ShifterBorrowProxyLib.InitializationAction({\\n      to: to,\\n      txData: txData\\n    }));\\n  }\\n}\\n\",\"keccak256\":\"0x4a68c135a40b0ff83c289d6a4e292bd0cbdc292b3e420c5f92958c16add43121\",\"license\":\"MIT\"},\"contracts/utils/AddressSetLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary AddressSetLib {\\n  struct AddressSet {\\n    mapping (address => bool) uniq;\\n    address[] set;\\n  }\\n  function insert(AddressSet storage addressSet, address item) internal {\\n    if (addressSet.uniq[item]) return;\\n    addressSet.set.push(item);\\n  }\\n  function get(AddressSet storage addressSet, uint256 i) internal view returns (address) {\\n    return addressSet.set[i];\\n  }\\n  function size(AddressSet storage addressSet) internal view returns (uint256) {\\n    return addressSet.set.length;\\n  }\\n}\\n\",\"keccak256\":\"0x5b5e060c2825541a6bd9372e33adba3ab8451642d022922184f51ab87cf33fce\",\"license\":\"MIT\"},\"contracts/utils/ExtLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary ExtLib {\\n  function getExtCodeHash(address target) internal view returns (bytes32 result) {\\n    assembly {\\n      result := extcodehash(target)\\n    }\\n  }\\n  function isContract(address target) internal view returns (bool result) {\\n    assembly {\\n      result := iszero(iszero(extcodesize(target)))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc7de2388e172afde1e93560f451bd6215f411a7ed51cdb750cbc17617173cd57\",\"license\":\"MIT\"},\"contracts/utils/MemcpyLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary MemcpyLib {\\n  function memcpy(bytes32 dest, bytes32 src, uint256 len) internal pure {\\n    assembly {\\n      for {} iszero(lt(len, 0x20)) { len := sub(len, 0x20) } {\\n        mstore(dest, mload(src))\\n        dest := add(dest, 0x20)\\n        src := add(src, 0x20)\\n      }\\n      let mask := sub(shl(mul(sub(32, len), 8), 1), 1)\\n      mstore(dest, or(and(mload(src), not(mask)), and(mload(dest), mask)))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6692972a7b1f397575ce10ab8652b92337ae9b30fda75c7648acb6c309d7dbf0\",\"license\":\"MIT\"},\"contracts/utils/RevertCaptureLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { SliceLib } from \\\"./SliceLib.sol\\\";\\n\\nlibrary RevertCaptureLib {\\n  using SliceLib for *;\\n  uint32 constant REVERT_WITH_REASON_MAGIC = 0x08c379a0; // keccak256(\\\"Error(string)\\\")\\n  function decodeString(bytes memory input) internal pure returns (string memory retval) {\\n    (retval) = abi.decode(input, (string));\\n  }\\n  function decodeError(bytes memory buffer) internal pure returns (string memory) {\\n    if (buffer.length == 0) return \\\"captured empty revert buffer\\\";\\n    if (uint32(uint256(bytes32(buffer.toSlice(0, 4).asWord()))) != REVERT_WITH_REASON_MAGIC) return \\\"captured a revert error, but it doesn't conform to the standard\\\";\\n    bytes memory revertMessageEncoded = buffer.toSlice(4).copy();\\n    if (revertMessageEncoded.length == 0) return \\\"captured empty revert message\\\";\\n    (string memory revertMessage) = decodeString(revertMessageEncoded);\\n    return revertMessage;\\n  }\\n}\\n\",\"keccak256\":\"0x03a939369019394c9ddb4e79e0a4b90c4f5d8e398ff5db501c9f9d4ee68997c5\",\"license\":\"MIT\"},\"contracts/utils/SliceLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { MemcpyLib } from \\\"./MemcpyLib.sol\\\";\\n\\nlibrary SliceLib {\\n  struct Slice {\\n    uint256 data;\\n    uint256 length;\\n    uint256 offset;\\n  }\\n  function toPtr(bytes memory input, uint256 offset) internal pure returns (uint256 data) {\\n    assembly {\\n      data := add(input, add(offset, 0x20))\\n    }\\n  }\\n  function toSlice(bytes memory input, uint256 offset, uint256 length) internal pure returns (Slice memory retval) {\\n    retval.data = toPtr(input, offset);\\n    retval.length = length;\\n    retval.offset = offset;\\n  }\\n  function toSlice(bytes memory input) internal pure returns (Slice memory) {\\n    return toSlice(input, 0);\\n  }\\n  function toSlice(bytes memory input, uint256 offset) internal pure returns (Slice memory) {\\n    if (input.length < offset) offset = input.length;\\n    return toSlice(input, offset, input.length - offset);\\n  }\\n  function toSlice(Slice memory input, uint256 offset, uint256 length) internal pure returns (Slice memory) {\\n    return Slice({\\n      data: input.data + offset,\\n      offset: input.offset + offset,\\n      length: length\\n    });\\n  }\\n  function toSlice(Slice memory input, uint256 offset) internal pure returns (Slice memory) {\\n    return toSlice(input, offset, input.length - offset);\\n  }\\n  function toSlice(Slice memory input) internal pure returns (Slice memory) {\\n    return toSlice(input, 0);\\n  }\\n  function maskLastByteOfWordAt(uint256 data) internal pure returns (uint8 lastByte) {\\n    assembly {\\n      lastByte := and(mload(data), 0xff)\\n    }\\n  }\\n  function get(Slice memory slice, uint256 index) internal pure returns (bytes1 result) {\\n    return bytes1(maskLastByteOfWordAt(slice.data - 0x1f + index));\\n  }\\n  function setByteAt(uint256 ptr, uint8 value) internal pure {\\n    assembly {\\n      mstore8(ptr, value)\\n    }\\n  }\\n  function set(Slice memory slice, uint256 index, uint8 value) internal pure {\\n    setByteAt(slice.data + index, value);\\n  }\\n  function wordAt(uint256 ptr, uint256 length) internal pure returns (bytes32 word) {\\n    assembly {\\n      let mask := sub(shl(mul(length, 0x8), 0x1), 0x1)\\n      word := and(mload(sub(ptr, sub(0x20, length))), mask)\\n    }\\n  }\\n  function asWord(Slice memory slice) internal pure returns (bytes32 word) {\\n    uint256 data = slice.data;\\n    uint256 length = slice.length;\\n    return wordAt(data, length);\\n  }\\n  function toDataStart(bytes memory input) internal pure returns (bytes32 start) {\\n    assembly {\\n      start := add(input, 0x20)\\n    }\\n  }\\n  function copy(Slice memory slice) internal pure returns (bytes memory retval) {\\n    uint256 length = slice.length;\\n    retval = new bytes(length);\\n    bytes32 src = bytes32(slice.data);\\n    bytes32 dest = toDataStart(retval);\\n    MemcpyLib.memcpy(dest, src, length);\\n  }\\n  function keccakAt(uint256 data, uint256 length) internal pure returns (bytes32 result) {\\n    assembly {\\n      result := keccak256(data, length)\\n    }\\n  }\\n  function toKeccak(Slice memory slice) internal pure returns (bytes32 result) {\\n    return keccakAt(slice.data, slice.length);\\n  }\\n}\\n\",\"keccak256\":\"0xde40e25d2efd85a714714a080b7d62b3633effa0613d4ca7831a5abbf70180d3\",\"license\":\"MIT\"},\"contracts/utils/StringLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary StringLib {\\n    /// @notice Convert a uint value to its decimal string representation\\n    // solium-disable-next-line security/no-assign-params\\n    function toString(uint256 _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @notice Convert a bytes32 value to its hex string representation\\n    function toString(bytes32 _value) internal pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(32 * 2 + 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < 32; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(_value[i] >> 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(_value[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    /// @notice Convert an address to its hex string representation\\n    function toString(address _addr) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(_addr));\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(20 * 2 + 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < 20; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(value[i + 12] >> 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(value[i + 12] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n    function toString(bytes memory input) internal pure returns (string memory) {\\n      return string(input);\\n    }\\n}\\n\",\"keccak256\":\"0xe9996ac71f9b093c2857d86d1480d2698c5ad5e37dc7a6d0f425e53721c51091\",\"license\":\"MIT\"},\"contracts/utils/TokenUtils.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n  function encodeTransfer(address target, uint256 amount) internal pure returns (bytes memory retval) {\\n    retval = abi.encodeWithSelector(IERC20.transfer.selector, target, amount);\\n  }\\n  function sendToken(address token, address target, uint256 amount) internal returns (bool) {\\n    (bool success,) = token.call(encodeTransfer(target, amount));\\n    return success;\\n  }\\n  function encodeTransferFrom(address from, address to, uint256 amount) internal pure returns (bytes memory retval) {\\n    retval = abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount);\\n  }\\n  function transferTokenFrom(address token, address from, address to, uint256 amount) internal returns (bool) {\\n    (bool success,) = token.call(encodeTransferFrom(from, to, amount));\\n    return success;\\n  }\\n  function encodeApproval(address target, uint256 amount) internal pure returns (bytes memory retval) {\\n    retval = abi.encodeWithSelector(IERC20.approve.selector, target, amount);\\n  }\\n  function approveToken(address token, address target, uint256 amount) internal returns (bool) {\\n    (bool success,) = token.call(encodeApproval(target, amount));\\n    return success;\\n  }\\n  uint256 constant THRESHOLD = 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n  uint256 constant MAX_UINT256 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n  function approveForMaxIfNeeded(address token, address target) internal returns (bool) {\\n    uint256 approved = getApproved(token, address(this), target);\\n    if (approved > THRESHOLD) return true;\\n    if (approved != 0 && !approveToken(token, address(this), 0)) return false;\\n    return approveToken(token, target, MAX_UINT256);\\n  }\\n  function encodeAllowance(address source, address target) internal pure returns (bytes memory retval) {\\n    retval = abi.encodeWithSelector(IERC20.allowance.selector, source, target);\\n  }\\n  function decodeUint(bytes memory input) internal pure returns (uint256 retval) {\\n    (retval) = abi.decode(input, (uint256));\\n  }\\n  function getApproved(address token, address source, address target) internal returns (uint256) {\\n    (bool success, bytes memory retval) = token.call(encodeAllowance(source, target));\\n    if (!success || retval.length != 0x20) return 0x1;\\n    return decodeUint(retval);\\n  }\\n}\\n\",\"keccak256\":\"0x4fbca09a038a8272ad9e8cf05c818c376c27720e37c8924e846966f0f9d8016c\",\"license\":\"MIT\"},\"contracts/utils/ViewExecutor.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract ViewExecutor {\\n  function encodeExecuteQuery(address viewLogic, bytes memory payload) internal pure returns (bytes memory retval) {\\n    retval = abi.encodeWithSignature(\\\"_executeQuery(address,bytes)\\\", viewLogic, payload);\\n  }\\n  function query(address viewLogic, bytes memory payload) public view returns (bytes memory) {\\n    (bool success, bytes memory response) = viewLogic.staticcall(encodeExecuteQuery(viewLogic, payload));\\n    require(success, string(response));\\n    return response;\\n  }\\n  function _executeQuery(address delegateTo, bytes memory callData) public returns (bytes memory) {\\n    require(msg.sender == address(this), \\\"unauthorized view layer delegation\\\");\\n    (bool success, bytes memory retval) = delegateTo.delegatecall(callData);\\n    require(success);\\n    return retval;\\n  }\\n}\\n\",\"keccak256\":\"0x19ac4d69df99b10bf8672557f20d1ce5dd0306766baccc249890e51278652e68\",\"license\":\"MIT\"},\"contracts/utils/sandbox/ISafeView.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface ISafeView {\\n  function execute(bytes calldata) external;\\n  function _executeSafeView(bytes calldata, bytes calldata) external;\\n}\\n\",\"keccak256\":\"0x5c6a466fb34671be27998d54ec8b11c5e9320fcd680ecd6c1363004bf0bca0f4\",\"license\":\"MIT\"},\"contracts/utils/sandbox/SafeViewExecutor.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { SafeViewLib } from \\\"./SafeViewLib.sol\\\";\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\ncontract SafeViewExecutor {\\n  using SafeViewLib for *;\\n  bytes32 constant STEALTH_VIEW_DEPLOY_SALT = 0xad53495153c7c363e98a26920ec679e0e687636458f6908c91cf6deadb190801;\\n  function _executeSafeView(bytes memory creationCode, bytes memory context) public {\\n    address viewLayer = Create2.deploy(0, SafeViewLib.GET_STEALTH_VIEW_DEPLOY_SALT(), creationCode);\\n    bytes memory result = viewLayer.executeLogic(context).encodeResult();\\n    result.revertWithData();\\n  }\\n  function query(bytes memory creationCode, bytes memory context) public returns (SafeViewLib.SafeViewResult memory) {\\n    return creationCode.safeView(context);\\n  }\\n}\\n\",\"keccak256\":\"0xd51efe5b10a6960c509df5ed3bfefc1605c98643f4c733687d60af25092a5fb7\",\"license\":\"MIT\"},\"contracts/utils/sandbox/SafeViewLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { ISafeView } from \\\"./ISafeView.sol\\\";\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nlibrary SafeViewLib {\\n  struct SafeViewResult {\\n    bool success;\\n    bytes data;\\n  }\\n  function executeLogic(address viewLayer, bytes memory context) internal returns (SafeViewResult memory) {\\n    (bool success, bytes memory retval) = viewLayer.delegatecall(encodeExecute(context));\\n    return SafeViewResult({\\n      success: success,\\n      data: retval\\n    });\\n  }\\n  function encodeResult(SafeViewResult memory input) internal pure returns (bytes memory retval) {\\n    retval = abi.encode(input);\\n  }\\n  function revertWithData(bytes memory input) internal pure {\\n    assembly {\\n      revert(add(input, 0x20), mload(input))\\n    }\\n  }\\n  function decodeViewResult(bytes memory data) internal pure returns (SafeViewResult memory result) {\\n     (result) = abi.decode(data, (SafeViewResult));\\n   }\\n   function encodeExecuteSafeView(bytes memory creationCode, bytes memory context) internal pure returns (bytes memory retval) {\\n     retval = abi.encodeWithSelector(ISafeView._executeSafeView.selector, creationCode, context);\\n   }\\n   function encodeExecute(bytes memory context) internal pure returns (bytes memory retval) {\\n     retval = abi.encodeWithSelector(ISafeView.execute.selector, context);\\n   }\\n  function safeView(bytes memory creationCode, bytes memory context) internal returns (SafeViewLib.SafeViewResult memory) {\\n    (/* bool success */, bytes memory retval) = address(this).call(encodeExecuteSafeView(creationCode, context));\\n    return decodeViewResult(retval);\\n  }\\n  bytes32 constant STEALTH_VIEW_DEPLOY_SALT = 0xad53495153c7c363e98a26920ec679e0e687636458f6908c91cf6deadb190801;\\n  function GET_STEALTH_VIEW_DEPLOY_SALT() internal pure returns (bytes32) {\\n    return STEALTH_VIEW_DEPLOY_SALT;\\n  }\\n  function deriveViewAddress(bytes memory creationCode) internal view returns (address) {\\n    return Create2.computeAddress(STEALTH_VIEW_DEPLOY_SALT, keccak256(creationCode));\\n  }\\n}\\n\",\"keccak256\":\"0xa274f8262ba1e34d13f58f0bc29f12bdc43d19b7c8c3dc3b259566faed3a40ff\",\"license\":\"MIT\"},\"contracts/utils/sandbox/SandboxLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { SliceLib } from \\\"../SliceLib.sol\\\";\\nimport { SafeViewLib } from \\\"./SafeViewLib.sol\\\";\\nimport { BorrowProxy } from \\\"../../BorrowProxy.sol\\\";\\nimport { ShifterBorrowProxyLib } from \\\"../../ShifterBorrowProxyLib.sol\\\";\\nimport { RevertCaptureLib } from \\\"../../utils/RevertCaptureLib.sol\\\";\\nimport { PreprocessorLib } from \\\"../../preprocessors/lib/PreprocessorLib.sol\\\";\\nimport { StringLib } from \\\"../../utils/StringLib.sol\\\";\\n\\nlibrary SandboxLib {\\n  using SafeViewLib for *;\\n  using SliceLib for *;\\n  using StringLib for *;\\n  using PreprocessorLib for *;\\n  struct ProtectedExecution {\\n    address to;\\n    bytes txData;\\n    bool success;\\n    bytes returnData;\\n  }\\n  function applyExecutionResult(ProtectedExecution[][] memory trace, uint256 index, ShifterBorrowProxyLib.InitializationAction[] memory preprocessed) internal pure returns (bool) {\\n    ProtectedExecution[] memory execution = new ProtectedExecution[](preprocessed.length);\\n    for (uint256 i = 0; i < execution.length; i++) {\\n      execution[i].txData = preprocessed[i].txData;\\n      execution[i].to = preprocessed[i].to;\\n    }\\n    trace[index] = execution;\\n    return execution.length != 0;\\n  }\\n  struct Context {\\n    address preprocessorAddress;\\n    ProtectedExecution[][] trace;\\n  }\\n  function encodeContext(ExecutionContext memory input) internal pure returns (bytes memory context) {\\n    context = abi.encode(input);\\n  }\\n  function toContext(bytes memory input) internal pure returns (ExecutionContext memory context) {\\n    (context) = abi.decode(input, (ExecutionContext));\\n  }\\n  function _write(ProtectedExecution[][] memory trace, uint256 newSize) internal pure {\\n    assembly {\\n      mstore(trace, newSize)\\n    }\\n  }\\n  function _restrict(Context memory context) internal pure {\\n    _write(context.trace, 0);\\n  }\\n  function _grow(Context memory context) internal pure {\\n    ProtectedExecution[][] memory trace = context.trace;\\n    uint256 newSize = trace.length;\\n    _write(trace, newSize + 1);\\n  }\\n  function toInitializationActions(bytes memory input) internal pure returns (ShifterBorrowProxyLib.InitializationAction[] memory action) {\\n    (action) = abi.decode(input, (ShifterBorrowProxyLib.InitializationAction[]));\\n  }\\n  function encodeInitializationActions(ShifterBorrowProxyLib.InitializationAction[] memory input) internal pure returns (bytes memory result) {\\n    result = abi.encode(input);\\n  }\\n  function _shrink(Context memory context) internal pure {\\n    _write(context.trace, context.trace.length - 1);\\n  }\\n  function encodeProxyCall(ProtectedExecution memory execution) internal pure returns (bytes memory retval) {\\n    retval = abi.encodeWithSelector(BorrowProxy.proxy.selector, execution.to, 0, execution.txData);\\n  }\\n  function toFlat(ProtectedExecution[][] memory execution) internal pure returns (ProtectedExecution[] memory trace) {\\n    uint256 total = 0;\\n    for (uint256 i = 0; i < execution.length; i++) {\\n      total += execution[i].length;\\n    }\\n    trace = new ProtectedExecution[](total);\\n    uint256 seen = 0;\\n    for (uint256 i = 0; i < execution.length; i++) {\\n      for (uint256 j = 0; j < execution[i].length; j++) {\\n        trace[seen] = execution[i][j];\\n      }\\n    }\\n  }\\n  function getNewContext(ShifterBorrowProxyLib.InitializationAction[] memory actions) internal pure returns (Context memory context) {\\n    ProtectedExecution[][] memory trace = new ProtectedExecution[][](actions.length);\\n    for (uint256 i = 0; i < actions.length; i++) {\\n      trace[i] = new ProtectedExecution[](1);\\n      trace[i][0].to = actions[i].to;\\n      trace[i][0].txData = actions[i].txData;\\n    }\\n    context = Context({\\n      trace: trace,\\n      preprocessorAddress: address(0)\\n    });\\n  }\\n  struct ExecutionContext {\\n    ProtectedExecution last;\\n    address preprocessorAddress;\\n  }\\n  function executeSafeView(bytes memory creationCode, uint256 index, Context memory context) internal returns (SafeViewLib.SafeViewResult memory result) {\\n    ExecutionContext memory executionContext;\\n    executionContext.preprocessorAddress = context.preprocessorAddress;\\n    if (index != 0) {\\n      ProtectedExecution[] memory lastBatch = context.trace[index];\\n      if (lastBatch.length != 0) executionContext.last = lastBatch[lastBatch.length - 1];\\n    }\\n    result = creationCode.safeView(encodeContext(executionContext));\\n  }\\n  function processActions(ShifterBorrowProxyLib.InitializationAction[] memory actions) internal returns (ProtectedExecution[] memory trace) {\\n    Context memory context = getNewContext(actions);\\n    for (uint256 i = 0; i < actions.length; i++) {\\n      ProtectedExecution[] memory execution = context.trace[i];\\n      if (execution[0].to == address(0x0)) {\\n        context.preprocessorAddress = execution[0].txData.deriveViewAddress();\\n        SafeViewLib.SafeViewResult memory safeViewResult = executeSafeView(execution[0].txData, i, context);\\n        execution[0].txData = new bytes(0x0);\\n        if (safeViewResult.success) {\\n          if (!applyExecutionResult(context.trace, i, toInitializationActions(safeViewResult.data))) break;\\n        } else {\\n          execution[0].returnData = safeViewResult.data;\\n          execution[0].success = safeViewResult.success;\\n// for debugging\\n          bytes memory data = execution[0].returnData;\\n          assembly {\\n            revert(add(data, 0x20), mload(data))\\n          }\\n// end\\n          continue;\\n        }\\n      }\\n      execution = context.trace[i];\\n      for (uint256 j = 0; j < execution.length; j++) {\\n        (bool success, bytes memory returnData) = address(this).call(encodeProxyCall(execution[j]));\\n        execution[j].success = success;\\n// for debugging\\n        if (!execution[j].success) {\\n          assembly {\\n            revert(add(0x20, returnData), mload(returnData))\\n          }\\n        }\\n// end\\n        execution[j].returnData = returnData;\\n      }\\n    }\\n    return toFlat(context.trace);\\n  }\\n}\\n\",\"keccak256\":\"0xd33735411d05231e29ecb682b11fb8612c308b90d1eabccc97951f54c8290b87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "$63bcb1a864e5f3c83b35ceb0ce459b5367$__9063dd678a0790611383908690869060040161427f565b60206040518083038186803b15801561139b57600080fd5b505af4158015610fc8573d6000803e3d6000fd5b6001600160a01b038082166000908152600d840160205260408120549091168061072b5760405162461bcd60e51b81526004016104e0906140e4565b600061143e60007f6b6f6b75258f8f4cdb6ef275682bc2be3e8b970e5e4417113bd1ea53622d907e60001b6040518060200161142690612b72565b601f1982820381018352601f9091011660405261121a565b905090565b6000606061144f612b7f565b6040805160a08101825285515181830190815282518084019093523383528651516060908101519293849391840191602082019061149690600190600a81046103e8611e15565b905281528751516060908101516020928301529183526040805160a081018252898301805151825280518401518285015280518301519282019290925281518401519381019390935251608090810151908301529190910152845190915061150f9061150190611f09565b85519063ffffffff611f2216565b61152b5760405162461bcd60e51b81526004016104e090613f5f565b83515160009061153a90611f53565b600254909150611559906001600160a01b03168263ffffffff6111ea16565b935061156d846001600160a01b0316611f5e565b1561158a5760405162461bcd60e51b81526004016104e090613ae6565b6115bf8460016040516020016115a091906138af565b60408051601f198184030181529190526010919063ffffffff611f6416565b60208501516060015182516000916115dd919063ffffffff611f8716565b90506115e882611fb4565b508551518051602090910151611610916001600160a01b03881691600163ffffffff611ac016565b855151516001600160a01b03163314801590611630575085516020015134145b156116ea57855151516040516001600160a01b03909116903480156108fc02916000818181858888f1935050505015801561166f573d6000803e3d6000fd5b508551516020015161169f90869061168f9060019063ffffffff610f6916565b8861169987611fcd565b85611fd8565b855151602001516116c0906001600160a01b0316338363ffffffff611b8116565b6116dc5760405162461bcd60e51b81526004016104e090613c08565b85515160a001519350611752565b855151516001600160a01b031633141561173a578551516020015161172e90869061171d9060019063ffffffff610f6916565b8861172787611fcd565b6000611fd8565b85604001519350611752565b60405162461bcd60e51b81526004016104e090613fd8565b505050915091565b604051630bfceb2b60e31b81526001600160a01b03831690635fe759589061178690849060040161399f565b600060405180830381600087803b1580156117a057600080fd5b505af11580156117b4573d6000803e3d6000fd5b505050505050565b60008183106117cb578161072b565b5090919050565b6000808260000151602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561181657600080fd5b505afa15801561182a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184e9190613644565b905060128160ff1611156118745760405162461bcd60e51b81526004016104e0906141bd565b60085483516060015160ff8316601203600a0a908161188f57fe5b0411156118ae5760405162461bcd60e51b81526004016104e090614251565b50919050565b825160800151600090156118da5760405162461bcd60e51b81526004016104e090613e11565b348460200151146118fd5760405162461bcd60e51b81526004016104e090613c6d565b61191661190985611f09565b859063ffffffff611f2216565b6119325760405162461bcd60e51b81526004016104e090613f5f565b61193a612b9f565b508351600061194882611f53565b6040805160008082526020820190925291925061197b565b611968612b12565b8152602001906001900390816119605790505b5060a0830152611989612bd6565b60405180606001604052808481526020016040518060400160405280336001600160a01b031681526020016119d087606001518b8b6001611e15909392919063ffffffff16565b90528152602085810180516001600160a01b03166000908152600f8352604090205490519190920191611a3691611a2a90611a139060019063ffffffff610f6916565b602089015160608a0151919063ffffffff61207a16565b9063ffffffff6120cb16565b90529050611a4382611fb4565b9350611a516001858361210d565b611a79836020015185611a63846121ac565b60408c015160019392919063ffffffff6121e316565b6020830151611a99906001600160a01b031633308963ffffffff61228a16565b611ab55760405162461bcd60e51b81526004016104e090614021565b505050949350505050565b6040516329c8702d60e01b81526001600160a01b038516906329c8702d90611af0908690869086906004016138ed565b602060405180830381600087803b158015611b0a57600080fd5b505af1158015611b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b42919061326d565b6108075760405162461bcd60e51b81526004016104e090613cf0565b6001600160a01b0380821660009081526001840160205260409020541692915050565b600080846001600160a01b0316611b9885856122fe565b604051611ba59190613862565b6000604051808303816000865af19150503d8060008114611be2576040519150601f19603f3d011682016040523d82523d6000602084013e611be7565b606091505b50909695505050505050565b600080611c1e670de0b6b3a7640000611c12868663ffffffff61231b16565b9063ffffffff61235516565b905083811015611c32578084039150611c35565b50825b9250929050565b80846000611c4a8686611d52565b81526020808201929092526040908101600020835181549385015160ff1990941690151517610100600160a81b0319166101006001600160a01b0394851602178155908301516001820180546001600160a01b031990811692851692909217905560609093015160029091018054909316911617905550505050565b80846000611c4a8686611d8c565b60606104a53083612397565b6060635f7d2b5760e01b8383604051602401611cfd929190613a57565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529392505050565b611d3e612b12565b818060200190518101906104a5919061337e565b600080611d5e846124f6565b9050611d6a81846124fa565b8051906020012091505092915050565b602001516001600160a01b0316151590565b6000611d988383612526565b80519060200120905092915050565b600061072b82611db685611cd4565b8051906020012061253b565b60606309c5eabe60e01b82604051602401611ddd9190613a44565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915292915050565b611e1d612c03565b8460040154821015611e415760405162461bcd60e51b81526004016104e090613b5d565b6000611e5c670de0b6b3a7640000606463ffffffff61235516565b9050611e77670de0b6b3a7640000606463ffffffff61235516565b611e9386611c1287670de0b6b3a764000063ffffffff61231b16565b11611eb05760405162461bcd60e51b81526004016104e090614191565b6000848610611ed257611ecd86611c12848863ffffffff61231b16565b611ed4565b815b905060405180608001604052808543018152602001868152602001886005015481526020018281525092505050949350505050565b6000611f1482612548565b805190602001209050919050565b6000611f3a611f3083612568565b8460400151612598565b8351516001600160a01b03908116911614905092915050565b6000611f14826126c6565b3b151590565b80516020918201206001600160a01b039092166000908152929052604090912055565b600061072b670de0b6b3a7640000611c12856020015160200151606001518561231b90919063ffffffff16565b6002546000906104a5906001600160a01b031683611010565b6000611f14826126e2565b8251516020908101519084015160408082015160608301516080909301519151637bf1bc5b60e11b81526001600160a01b038a169463f7e378b694612028948b9492938a91908a90600401613911565b602060405180830381600087803b15801561204257600080fd5b505af1158015612056573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b4919061326d565b60008061208684612709565b90506000612094848761277c565b905060006120ae612710611c12848663ffffffff61231b16565b90506120c0828263ffffffff6120cb16565b979650505050505050565b600061072b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506127fd565b606061211882612829565b82516020015190915061213790600f860190859063ffffffff61283c16565b81515161215090600f860190859063ffffffff61287016565b8151516040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015612189573d6000803e3d6000fd5b5061219e600f8501848363ffffffff611f6416565b8151516108079084836128a4565b60006104a56121d26121bd846128f4565b6121c685612925565b9063ffffffff61295616565b60408401519063ffffffff6120cb16565b6121ed85856113af565b6001600160a01b0316631f9efb208484846040518463ffffffff1660e01b815260040161221c939291906138cc565b602060405180830381600087803b15801561223657600080fd5b505af115801561224a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226e919061326d565b6106995760405162461bcd60e51b81526004016104e090613d5f565b600080856001600160a01b03166122a286868661297b565b6040516122af9190613862565b6000604051808303816000865af19150503d80600081146122ec576040519150601f19603f3d011682016040523d82523d6000602084013e6122f1565b606091505b5090979650505050505050565b606063a9059cbb60e01b8383604051602401611cfd929190613986565b60008261232a575060006104a5565b8282028284828161233757fe5b041461072b5760405162461bcd60e51b81526004016104e090613f1e565b600061072b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506129d4565b60408051600081526020810190915260609081906123b89060448101613a44565b60408051601f198184030181529190526020810180516001600160e01b03166352e831dd60e01b17905280519091506063016001600160401b03811180156123ff57600080fd5b506040519080825280601f01601f19166020018201604052801561242a576020820181803683370190505b507f3d3d606380380380913d393d73bebebebebebebebebebebebebebebebebebebe6020820152600160601b858102602d8301527f5af4602a57600080fd5b602d8060366000396000f3363d3d373d3d3d363d73be6041830152840260608201526e5af43d82803e903d91602b57fd5bf360881b6074820152915060005b8151811015611058578181815181106124bd57fe5b602001015160f81c60f81b8382606301815181106124d757fe5b60200101906001600160f81b031916908160001a9053506001016124a8565b3f90565b6060828260405160200161250f92919061384a565b604051602081830303815290604052905092915050565b6060828260405160200161250f9291906137b6565b600061072b838330612a0b565b60608061255c836000015160a00151612a4a565b905061072b8382612a5d565b60008160405160200161257b919061387e565b604051602081830303815290604052805190602001209050919050565b600081516041146125bb5760405162461bcd60e51b81526004016104e090613b8b565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561260d5760405162461bcd60e51b81526004016104e090613d1d565b8060ff16601b1415801561262557508060ff16601c14155b156126425760405162461bcd60e51b81526004016104e090613e6e565b6000600187838686604051600081526020016040526040516126679493929190613a26565b6020604051602081039080840390855afa158015612689573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126bc5760405162461bcd60e51b81526004016104e090613a85565b9695505050505050565b6060806126d68360a00151612a4a565b905061072b8382612a93565b80515160409081015160208084015180519082015193516060946113299493909101613834565b6000816001600160a01b03166313966db56040518163ffffffff1660e01b815260040160206040518083038186803b15801561274457600080fd5b505afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a5919061362c565b6040516350b9d97b60e11b81526000906001600160a01b0384169063a173b2f6906127ab9085906004016138af565b602060405180830381600087803b1580156127c557600080fd5b505af11580156127d9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072b919061362c565b600081848411156128215760405162461bcd60e51b81526004016104e09190613a44565b505050900390565b60608160405160200161132991906142cb565b6001600160a01b039182166000908152600290930160205260409092208054919092166001600160a01b0319909116179055565b6001600160a01b039182166000908152600190930160205260409092208054919092166001600160a01b0319909116179055565b816001600160a01b0316836001600160a01b03167f9ae84ac2ad8f721c2e62d211eca0ae34951726f8834913af6c5ebb81610bb1f8836040516128e79190613a44565b60405180910390a3505050565b60006104a5670de0b6b3a7640000611c1284602001516020015160600151856040015161231b90919063ffffffff16565b60006104a5670de0b6b3a7640000611c1284602001516020015160400151856040015161231b90919063ffffffff16565b60008282018381101561072b5760405162461bcd60e51b81526004016104e090613c36565b60606323b872dd60e01b84848460405160240161299a93929190613962565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152949350505050565b600081836129f55760405162461bcd60e51b81526004016104e09190613a44565b506000838581612a0157fe5b0495945050505050565b60008060ff60f81b838686604051602001612a2994939291906137dd565b60408051808303601f19018152919052805160209091012095945050505050565b606081604051602001611329919061399f565b8151602080820151604080840151606085810151858901516080909701519351919661250f9630969592939192918a910161374f565b6060826000015183602001518460400151856060015186608001518660405160200161250f969594939291906136ef565b604080516080810190915280600081526000602082015260606040820181905201612aed612b2a565b905290565b604080516060810182526000808252602082018190529181019190915290565b60408051808201909152600081526060602082015290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60405180606001604052806000815260200160008152602001600081525090565b6103b38061448683390190565b6040518060400160405280612b92612bd6565b8152602001612aed612c2b565b6040805160c0810182526000808252602082018190529181018290526060808201839052608082019290925260a081019190915290565b6040518060600160405280612be9612b9f565b8152602001612bf6612c60565b8152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060a0016040528060008019168152602001600081526020016000801916815260200160008152602001606081525090565b604051806040016040528060006001600160a01b03168152602001612aed612c03565b80356104a581614462565b600082601f830112612c9e578081fd5b8135612cb1612cac826143f4565b6143ce565b818152915060208083019084810160005b84811015612d3a5781358701604080601f19838c03011215612ce357600080fd5b612cec816143ce565b85830135612cf981614462565b8152828201356001600160401b03811115612d1357600080fd5b612d218c8883870101612fe8565b8288015250865250509282019290820190600101612cc2565b505050505092915050565b600082601f830112612d55578081fd5b8135612d63612cac826143f4565b8181529150602080830190848101606080850287018301881015612d8657600080fd5b6000805b86811015612de15782848b031215612da0578182fd5b612da9836143ce565b612db38b86612c83565b8152612dc18b878701612c83565b818701526040858101359082015286529484019492820192600101612d8a565b5050505050505092915050565b600082601f830112612dfe578081fd5b8135612e0c612cac826143f4565b818152915060208083019084810160005b84811015612d3a5781358701606080601f19838c03011215612e3e57600080fd5b612e47816143ce565b8583013560038110612e5857600080fd5b8152604083810135612e6981614462565b82880152838301356001600160401b03811115612e8557600080fd5b84019250603f83018c13612e9857600080fd5b868301359350612eaa612cac856143f4565b84815287810190848301898702860184018f1015612ec757600080fd5b600095505b86861015612ef257612ede8f82612fd0565b835260019590950194918901918901612ecc565b509183019190915250865250509282019290820190600101612e1d565b600082601f830112612f1f578081fd5b8135612f2d612cac826143f4565b8181529150602080830190848101608080850287018301881015612f5057600080fd5b6000805b86811015612de15782848b031215612f6a578182fd5b612f73836143ce565b612f7d8b86612fc5565b8152612f8b8b878701612c83565b868201526040612f9d8c828801612c83565b908201526060612faf8c878301612c83565b9082015286529484019492820192600101612f54565b80356104a581614477565b80356001600160e01b0319811681146104a557600080fd5b600082601f830112612ff8578081fd5b8135613006612cac82614413565b915080825283602082850101111561301d57600080fd5b8060208401602084013760009082016020015292915050565b600060608284031215613047578081fd5b61305160606143ce565b905081356001600160401b038082111561306a57600080fd5b81840160c0818703121561307d57600080fd5b61308760c06143ce565b92506130938682612c83565b83526130a28660208301612c83565b602084015260408101356040840152606081013560608401526130c88660808301612fc5565b608084015260a0810135828111156130df57600080fd5b6130eb87828401612c8e565b60a0850152505081835260208401356020840152604084013591508082111561311357600080fd5b5061312084828501612fe8565b60408301525092915050565b60006020828403121561313d578081fd5b813561072b81614462565b600060208284031215613159578081fd5b815161072b81614462565b600080600060608486031215613178578182fd5b833561318381614462565b95602085013595506040909401359392505050565b60008060008060008060c087890312156131b0578384fd5b86356131bb81614462565b955060208701356131cb81614462565b945060408701356131db81614462565b959894975094956060810135955060808101359460a0909101359350915050565b6000806040838503121561320e578182fd5b823561321981614462565b9150602083013561322981614477565b809150509250929050565b60008060408385031215613246578182fd5b823561325181614462565b915060208301356001600160e01b031981168114613229578182fd5b60006020828403121561327e578081fd5b815161072b81614477565b60006020828403121561329a578081fd5b5035919050565b6000602082840312156132b2578081fd5b81356001600160401b038111156132c7578182fd5b6110f484828501612fe8565b600080604083850312156132e5578182fd5b82356001600160401b03808211156132fb578384fd5b61330786838701612fe8565b9350602085013591508082111561331c578283fd5b5061332985828601612fe8565b9150509250929050565b600080600060608486031215613347578081fd5b83356001600160401b0381111561335c578182fd5b61336886828701613036565b9660208601359650604090950135949350505050565b60006020808385031215613390578182fd5b82516001600160401b03808211156133a6578384fd5b818501604081880312156133b8578485fd5b6133c260406143ce565b925080516133cf81614477565b835280840151828111156133e1578586fd5b019050601f810186136133f2578384fd5b8051613400612cac82614413565b8181528785838501011115613413578586fd5b61342282868301878601614436565b9383019390935250949350505050565b600060208284031215613443578081fd5b81356001600160401b0380821115613459578283fd5b8184016060818703121561346b578384fd5b61347560606143ce565b9250803582811115613485578485fd5b61349187828401613036565b8452506020810135828111156134a5578485fd5b80820160a081890312156134b7578586fd5b6134c160a06143ce565b9150803582526020810135602083015260408101356040830152606081013560608301526080810135848111156134f6578687fd5b61350289828401612fe8565b60808401525050602084015260408101358281111561351f578485fd5b61352b87828401612c8e565b6040850152509195945050505050565b600080600080848603610140811215613552578283fd5b60e081121561355f578283fd5b5061356a60e06143ce565b6135748787612c83565b81526020860135602082015260408601356040820152606086013560608201526080860135608082015260a086013560a082015260c086013560c08201528094505060e08501356001600160401b03808211156135cf578384fd5b6135db88838901612dee565b94506101008701359150808211156135f1578384fd5b6135fd88838901612f0f565b9350610120870135915080821115613613578283fd5b5061362087828801612d45565b91505092959194509250565b60006020828403121561363d578081fd5b5051919050565b600060208284031215613655578081fd5b815160ff8116811461072b578182fd5b600060018060a01b0382511683526020820151604060208501526110f460408501825b600081518084526136a0816020860160208601614436565b601f01601f19169290920160200192915050565b60018060a01b038151168252602081015180516020840152602081015160408401526040810151606084015260608101516080840152505050565b60006bffffffffffffffffffffffff19808960601b168352808860601b1660148401525085602883015284604883015283151560f81b6068830152825161373d816069850160208701614436565b91909101606901979650505050505050565b60006bffffffffffffffffffffffff19808a60601b168352808960601b1660148401525086602883015285604883015284606883015283151560f81b608883015282516137a3816089850160208701614436565b9190910160890198975050505050505050565b60609290921b6001600160601b03191682526001600160e01b031916601482015260180190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b92835260609190911b6001600160601b0319166020830152603482015260540190565b9283526020830191909152604082015260600190565b9182526001600160e01b031916602082015260240190565b60008251613874818460208701614436565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b600060018060a01b03808a16835280891660208401525086604083015285606083015284608083015260e060a083015261394e60e0830185613688565b90508260c083015298975050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015613a0d57888303603f19018552815180516001600160a01b03168452878101518885018890526139f988860182613688565b9689019694505050908601906001016139c3565b509098975050505050505050565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261072b6020830184613688565b600060408252613a6a6040830185613688565b8281036020840152613a7c8185613688565b95945050505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526010908201526f185b1c9958591e4819195c1b1bde595960821b604082015260600190565b60208082526022908201527f70726f78792068617320616c7265616479206265656e20696e697469616c697a604082015261195960f21b606082015260800190565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b6020808252601490820152731d1a5b595bdd5d081a5b9cdd59999a58da595b9d60621b604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601490820152731ad9595c195c881c185e5bdd5d0819985a5b195960621b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602c908201527f737570706c696564206574686572206973206e6f7420657175616c20746f206760408201526b185cc81c995c5d595cdd195960a21b606082015260800190565b6020808252601a908201527f6661696c656420746f207265706179206c6f73742066756e6473000000000000604082015260600190565b6020808252601390820152727365747570207068617365206661696c75726560681b604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b60208082526024908201527f696e73756666696369656e742066756e647320696e206c6971756964697479206040820152631c1bdbdb60e21b606082015260800190565b6020808252601c908201527f6f6e6c792063616e2062652063616c6c6564206279206b656570657200000000604082015260600190565b6020808252601d908201527f6e6f742061207265676973746572656420626f72726f772070726f7879000000604082015260600190565b60208082526037908201527f6973206e6f742061206c6f616e20726571756573742c20747279207573696e6760408201527f2065786563757465536869667453616e73426f72726f77000000000000000000606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601f908201527f6661696c656420746f2072657475726e20626f6e6420746f206b656570657200604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526024908201527f6c69717569646974792072657175657374207369676e61747572652072656a6560408201526318dd195960e21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f696e636f72726563742067617320737570706c696564207769746820676173206040820152681c995c5d595cdd195960ba1b606082015260800190565b602080825260169082015275189bdb99081cdd589b5a5cdcda5bdb8819985a5b195960521b604082015260600190565b6020808252600e908201526d18dc99585d194c8819985a5b195960921b604082015260600190565b60208082526045908201527f63616e2774207a6970206d6f64756c65207265676973746174696f6e733a206d60408201527f6f64756c65732e6c656e67746820213d206d6f64756c6544657461696c732e6c6060820152640cadccee8d60db1b608082015260a00190565b6020808252818101527f6e6f7420612072656769737465726564206c697175696469747920746f6b656e604082015260600190565b60208082526017908201527f6c6f616e207265736f6c7574696f6e206661696c757265000000000000000000604082015260600190565b60208082526021908201527f6661696c656420746f2072657061792074686520676f7665726e696e672044416040820152604f60f81b606082015260800190565b602080825260129082015271626f6e642062656c6f77206d696e696d756d60701b604082015260600190565b6020808252603e908201527f74686520746f6b656e20737570706c696564206973206e6f742061207368696660408201527f74657220746f6b656e202d2d20646563696d616c7320746f6f20686967680000606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6020808252601490820152736c6f616e2065786365656473206d6178696d756d60601b604082015260600190565b918252602082015260400190565b8151151581526020808301516001600160a01b0390811691830191909152604080840151821690830152606092830151169181019190915260800190565b6020808252825160e08383015280516001600160a01b039081166101008501528183015116610120840152604081015161014084015260608101516101608401526080810151151561018084015260a0015160c06101a08401528051600092916101c085019182919061433e81846138af565b9350839250859181860284019086015b8284101561437a578482038652614366828251613665565b95870195600194909401939150860161434e565b5085890151945061438e60408901866136b4565b604089015160e089015280965050505050505092915050565b60006020825282511515602083015260208301516040808401526110f46060840182613688565b6040518181016001600160401b03811182821017156143ec57600080fd5b604052919050565b60006001600160401b03821115614409578081fd5b5060209081020190565b60006001600160401b03821115614428578081fd5b50601f01601f191660200190565b60005b83811015614451578181015183820152602001614439565b838111156108075750506000910152565b6001600160a01b03811681146107a057600080fd5b80151581146107a057600080fdfe608060405234801561001057600080fd5b50610393806100206000396000f3fe6080604052600436106100345760003560e01c80638e03e6cd14610039578063cf3090121461004e578063f83d08ba14610079575b600080fd5b61004c610047366004610255565b61008e565b005b34801561005a57600080fd5b50610063610175565b604051610070919061030b565b60405180910390f35b34801561008557600080fd5b5061004c61017e565b60005460ff161561009e57600080fd5b6001600160a01b038116156101695761014482826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016100dd91906102de565b60206040518083038186803b1580156100f557600080fd5b505afa158015610109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012d919061028d565b6001600160a01b038416919063ffffffff61018d16565b6101695760405162461bcd60e51b815260040161016090610316565b60405180910390fd5b816001600160a01b0316ff5b60005460ff1681565b6000805460ff19166001179055565b600080846001600160a01b03166101a485856101ff565b6040516101b191906102a5565b6000604051808303816000865af19150503d80600081146101ee576040519150601f19603f3d011682016040523d82523d6000602084013e6101f3565b606091505b50909695505050505050565b606063a9059cbb60e01b838360405160240161021c9291906102f2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529392505050565b60008060408385031215610267578182fd5b823561027281610345565b9150602083013561028281610345565b809150509250929050565b60006020828403121561029e578081fd5b5051919050565b60008251815b818110156102c557602081860181015185830152016102ab565b818111156102d35782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b602080825260159082015274657263323020666f7277617264206661696c75726560581b604082015260600190565b6001600160a01b038116811461035a57600080fd5b5056fea26469706673582212200ae2de389fc4c434ac0aa10c8d91d6fd790f0728e0df3289c86c07ffda762b5564736f6c634300060a0033a2646970667358221220523e52e8cdbde005745fd6c131ad58448e3832257d4a53745cb5282f300873c364736f6c634300060a0033",
  "deployedBytecode": "$63bcb1a864e5f3c83b35ceb0ce459b5367$__9063dd678a0790611383908690869060040161427f565b60206040518083038186803b15801561139b57600080fd5b505af4158015610fc8573d6000803e3d6000fd5b6001600160a01b038082166000908152600d840160205260408120549091168061072b5760405162461bcd60e51b81526004016104e0906140e4565b600061143e60007f6b6f6b75258f8f4cdb6ef275682bc2be3e8b970e5e4417113bd1ea53622d907e60001b6040518060200161142690612b72565b601f1982820381018352601f9091011660405261121a565b905090565b6000606061144f612b7f565b6040805160a08101825285515181830190815282518084019093523383528651516060908101519293849391840191602082019061149690600190600a81046103e8611e15565b905281528751516060908101516020928301529183526040805160a081018252898301805151825280518401518285015280518301519282019290925281518401519381019390935251608090810151908301529190910152845190915061150f9061150190611f09565b85519063ffffffff611f2216565b61152b5760405162461bcd60e51b81526004016104e090613f5f565b83515160009061153a90611f53565b600254909150611559906001600160a01b03168263ffffffff6111ea16565b935061156d846001600160a01b0316611f5e565b1561158a5760405162461bcd60e51b81526004016104e090613ae6565b6115bf8460016040516020016115a091906138af565b60408051601f198184030181529190526010919063ffffffff611f6416565b60208501516060015182516000916115dd919063ffffffff611f8716565b90506115e882611fb4565b508551518051602090910151611610916001600160a01b03881691600163ffffffff611ac016565b855151516001600160a01b03163314801590611630575085516020015134145b156116ea57855151516040516001600160a01b03909116903480156108fc02916000818181858888f1935050505015801561166f573d6000803e3d6000fd5b508551516020015161169f90869061168f9060019063ffffffff610f6916565b8861169987611fcd565b85611fd8565b855151602001516116c0906001600160a01b0316338363ffffffff611b8116565b6116dc5760405162461bcd60e51b81526004016104e090613c08565b85515160a001519350611752565b855151516001600160a01b031633141561173a578551516020015161172e90869061171d9060019063ffffffff610f6916565b8861172787611fcd565b6000611fd8565b85604001519350611752565b60405162461bcd60e51b81526004016104e090613fd8565b505050915091565b604051630bfceb2b60e31b81526001600160a01b03831690635fe759589061178690849060040161399f565b600060405180830381600087803b1580156117a057600080fd5b505af11580156117b4573d6000803e3d6000fd5b505050505050565b60008183106117cb578161072b565b5090919050565b6000808260000151602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561181657600080fd5b505afa15801561182a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184e9190613644565b905060128160ff1611156118745760405162461bcd60e51b81526004016104e0906141bd565b60085483516060015160ff8316601203600a0a908161188f57fe5b0411156118ae5760405162461bcd60e51b81526004016104e090614251565b50919050565b825160800151600090156118da5760405162461bcd60e51b81526004016104e090613e11565b348460200151146118fd5760405162461bcd60e51b81526004016104e090613c6d565b61191661190985611f09565b859063ffffffff611f2216565b6119325760405162461bcd60e51b81526004016104e090613f5f565b61193a612b9f565b508351600061194882611f53565b6040805160008082526020820190925291925061197b565b611968612b12565b8152602001906001900390816119605790505b5060a0830152611989612bd6565b60405180606001604052808481526020016040518060400160405280336001600160a01b031681526020016119d087606001518b8b6001611e15909392919063ffffffff16565b90528152602085810180516001600160a01b03166000908152600f8352604090205490519190920191611a3691611a2a90611a139060019063ffffffff610f6916565b602089015160608a0151919063ffffffff61207a16565b9063ffffffff6120cb16565b90529050611a4382611fb4565b9350611a516001858361210d565b611a79836020015185611a63846121ac565b60408c015160019392919063ffffffff6121e316565b6020830151611a99906001600160a01b031633308963ffffffff61228a16565b611ab55760405162461bcd60e51b81526004016104e090614021565b505050949350505050565b6040516329c8702d60e01b81526001600160a01b038516906329c8702d90611af0908690869086906004016138ed565b602060405180830381600087803b158015611b0a57600080fd5b505af1158015611b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b42919061326d565b6108075760405162461bcd60e51b81526004016104e090613cf0565b6001600160a01b0380821660009081526001840160205260409020541692915050565b600080846001600160a01b0316611b9885856122fe565b604051611ba59190613862565b6000604051808303816000865af19150503d8060008114611be2576040519150601f19603f3d011682016040523d82523d6000602084013e611be7565b606091505b50909695505050505050565b600080611c1e670de0b6b3a7640000611c12868663ffffffff61231b16565b9063ffffffff61235516565b905083811015611c32578084039150611c35565b50825b9250929050565b80846000611c4a8686611d52565b81526020808201929092526040908101600020835181549385015160ff1990941690151517610100600160a81b0319166101006001600160a01b0394851602178155908301516001820180546001600160a01b031990811692851692909217905560609093015160029091018054909316911617905550505050565b80846000611c4a8686611d8c565b60606104a53083612397565b6060635f7d2b5760e01b8383604051602401611cfd929190613a57565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529392505050565b611d3e612b12565b818060200190518101906104a5919061337e565b600080611d5e846124f6565b9050611d6a81846124fa565b8051906020012091505092915050565b602001516001600160a01b0316151590565b6000611d988383612526565b80519060200120905092915050565b600061072b82611db685611cd4565b8051906020012061253b565b60606309c5eabe60e01b82604051602401611ddd9190613a44565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915292915050565b611e1d612c03565b8460040154821015611e415760405162461bcd60e51b81526004016104e090613b5d565b6000611e5c670de0b6b3a7640000606463ffffffff61235516565b9050611e77670de0b6b3a7640000606463ffffffff61235516565b611e9386611c1287670de0b6b3a764000063ffffffff61231b16565b11611eb05760405162461bcd60e51b81526004016104e090614191565b6000848610611ed257611ecd86611c12848863ffffffff61231b16565b611ed4565b815b905060405180608001604052808543018152602001868152602001886005015481526020018281525092505050949350505050565b6000611f1482612548565b805190602001209050919050565b6000611f3a611f3083612568565b8460400151612598565b8351516001600160a01b03908116911614905092915050565b6000611f14826126c6565b3b151590565b80516020918201206001600160a01b039092166000908152929052604090912055565b600061072b670de0b6b3a7640000611c12856020015160200151606001518561231b90919063ffffffff16565b6002546000906104a5906001600160a01b031683611010565b6000611f14826126e2565b8251516020908101519084015160408082015160608301516080909301519151637bf1bc5b60e11b81526001600160a01b038a169463f7e378b694612028948b9492938a91908a90600401613911565b602060405180830381600087803b15801561204257600080fd5b505af1158015612056573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b4919061326d565b60008061208684612709565b90506000612094848761277c565b905060006120ae612710611c12848663ffffffff61231b16565b90506120c0828263ffffffff6120cb16565b979650505050505050565b600061072b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506127fd565b606061211882612829565b82516020015190915061213790600f860190859063ffffffff61283c16565b81515161215090600f860190859063ffffffff61287016565b8151516040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015612189573d6000803e3d6000fd5b5061219e600f8501848363ffffffff611f6416565b8151516108079084836128a4565b60006104a56121d26121bd846128f4565b6121c685612925565b9063ffffffff61295616565b60408401519063ffffffff6120cb16565b6121ed85856113af565b6001600160a01b0316631f9efb208484846040518463ffffffff1660e01b815260040161221c939291906138cc565b602060405180830381600087803b15801561223657600080fd5b505af115801561224a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226e919061326d565b6106995760405162461bcd60e51b81526004016104e090613d5f565b600080856001600160a01b03166122a286868661297b565b6040516122af9190613862565b6000604051808303816000865af19150503d80600081146122ec576040519150601f19603f3d011682016040523d82523d6000602084013e6122f1565b606091505b5090979650505050505050565b606063a9059cbb60e01b8383604051602401611cfd929190613986565b60008261232a575060006104a5565b8282028284828161233757fe5b041461072b5760405162461bcd60e51b81526004016104e090613f1e565b600061072b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506129d4565b60408051600081526020810190915260609081906123b89060448101613a44565b60408051601f198184030181529190526020810180516001600160e01b03166352e831dd60e01b17905280519091506063016001600160401b03811180156123ff57600080fd5b506040519080825280601f01601f19166020018201604052801561242a576020820181803683370190505b507f3d3d606380380380913d393d73bebebebebebebebebebebebebebebebebebebe6020820152600160601b858102602d8301527f5af4602a57600080fd5b602d8060366000396000f3363d3d373d3d3d363d73be6041830152840260608201526e5af43d82803e903d91602b57fd5bf360881b6074820152915060005b8151811015611058578181815181106124bd57fe5b602001015160f81c60f81b8382606301815181106124d757fe5b60200101906001600160f81b031916908160001a9053506001016124a8565b3f90565b6060828260405160200161250f92919061384a565b604051602081830303815290604052905092915050565b6060828260405160200161250f9291906137b6565b600061072b838330612a0b565b60608061255c836000015160a00151612a4a565b905061072b8382612a5d565b60008160405160200161257b919061387e565b604051602081830303815290604052805190602001209050919050565b600081516041146125bb5760405162461bcd60e51b81526004016104e090613b8b565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561260d5760405162461bcd60e51b81526004016104e090613d1d565b8060ff16601b1415801561262557508060ff16601c14155b156126425760405162461bcd60e51b81526004016104e090613e6e565b6000600187838686604051600081526020016040526040516126679493929190613a26565b6020604051602081039080840390855afa158015612689573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126bc5760405162461bcd60e51b81526004016104e090613a85565b9695505050505050565b6060806126d68360a00151612a4a565b905061072b8382612a93565b80515160409081015160208084015180519082015193516060946113299493909101613834565b6000816001600160a01b03166313966db56040518163ffffffff1660e01b815260040160206040518083038186803b15801561274457600080fd5b505afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a5919061362c565b6040516350b9d97b60e11b81526000906001600160a01b0384169063a173b2f6906127ab9085906004016138af565b602060405180830381600087803b1580156127c557600080fd5b505af11580156127d9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072b919061362c565b600081848411156128215760405162461bcd60e51b81526004016104e09190613a44565b505050900390565b60608160405160200161132991906142cb565b6001600160a01b039182166000908152600290930160205260409092208054919092166001600160a01b0319909116179055565b6001600160a01b039182166000908152600190930160205260409092208054919092166001600160a01b0319909116179055565b816001600160a01b0316836001600160a01b03167f9ae84ac2ad8f721c2e62d211eca0ae34951726f8834913af6c5ebb81610bb1f8836040516128e79190613a44565b60405180910390a3505050565b60006104a5670de0b6b3a7640000611c1284602001516020015160600151856040015161231b90919063ffffffff16565b60006104a5670de0b6b3a7640000611c1284602001516020015160400151856040015161231b90919063ffffffff16565b60008282018381101561072b5760405162461bcd60e51b81526004016104e090613c36565b60606323b872dd60e01b84848460405160240161299a93929190613962565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152949350505050565b600081836129f55760405162461bcd60e51b81526004016104e09190613a44565b506000838581612a0157fe5b0495945050505050565b60008060ff60f81b838686604051602001612a2994939291906137dd565b60408051808303601f19018152919052805160209091012095945050505050565b606081604051602001611329919061399f565b8151602080820151604080840151606085810151858901516080909701519351919661250f9630969592939192918a910161374f565b6060826000015183602001518460400151856060015186608001518660405160200161250f969594939291906136ef565b604080516080810190915280600081526000602082015260606040820181905201612aed612b2a565b905290565b604080516060810182526000808252602082018190529181019190915290565b60408051808201909152600081526060602082015290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60405180606001604052806000815260200160008152602001600081525090565b6103b38061448683390190565b6040518060400160405280612b92612bd6565b8152602001612aed612c2b565b6040805160c0810182526000808252602082018190529181018290526060808201839052608082019290925260a081019190915290565b6040518060600160405280612be9612b9f565b8152602001612bf6612c60565b8152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060a0016040528060008019168152602001600081526020016000801916815260200160008152602001606081525090565b604051806040016040528060006001600160a01b03168152602001612aed612c03565b80356104a581614462565b600082601f830112612c9e578081fd5b8135612cb1612cac826143f4565b6143ce565b818152915060208083019084810160005b84811015612d3a5781358701604080601f19838c03011215612ce357600080fd5b612cec816143ce565b85830135612cf981614462565b8152828201356001600160401b03811115612d1357600080fd5b612d218c8883870101612fe8565b8288015250865250509282019290820190600101612cc2565b505050505092915050565b600082601f830112612d55578081fd5b8135612d63612cac826143f4565b8181529150602080830190848101606080850287018301881015612d8657600080fd5b6000805b86811015612de15782848b031215612da0578182fd5b612da9836143ce565b612db38b86612c83565b8152612dc18b878701612c83565b818701526040858101359082015286529484019492820192600101612d8a565b5050505050505092915050565b600082601f830112612dfe578081fd5b8135612e0c612cac826143f4565b818152915060208083019084810160005b84811015612d3a5781358701606080601f19838c03011215612e3e57600080fd5b612e47816143ce565b8583013560038110612e5857600080fd5b8152604083810135612e6981614462565b82880152838301356001600160401b03811115612e8557600080fd5b84019250603f83018c13612e9857600080fd5b868301359350612eaa612cac856143f4565b84815287810190848301898702860184018f1015612ec757600080fd5b600095505b86861015612ef257612ede8f82612fd0565b835260019590950194918901918901612ecc565b509183019190915250865250509282019290820190600101612e1d565b600082601f830112612f1f578081fd5b8135612f2d612cac826143f4565b8181529150602080830190848101608080850287018301881015612f5057600080fd5b6000805b86811015612de15782848b031215612f6a578182fd5b612f73836143ce565b612f7d8b86612fc5565b8152612f8b8b878701612c83565b868201526040612f9d8c828801612c83565b908201526060612faf8c878301612c83565b9082015286529484019492820192600101612f54565b80356104a581614477565b80356001600160e01b0319811681146104a557600080fd5b600082601f830112612ff8578081fd5b8135613006612cac82614413565b915080825283602082850101111561301d57600080fd5b8060208401602084013760009082016020015292915050565b600060608284031215613047578081fd5b61305160606143ce565b905081356001600160401b038082111561306a57600080fd5b81840160c0818703121561307d57600080fd5b61308760c06143ce565b92506130938682612c83565b83526130a28660208301612c83565b602084015260408101356040840152606081013560608401526130c88660808301612fc5565b608084015260a0810135828111156130df57600080fd5b6130eb87828401612c8e565b60a0850152505081835260208401356020840152604084013591508082111561311357600080fd5b5061312084828501612fe8565b60408301525092915050565b60006020828403121561313d578081fd5b813561072b81614462565b600060208284031215613159578081fd5b815161072b81614462565b600080600060608486031215613178578182fd5b833561318381614462565b95602085013595506040909401359392505050565b60008060008060008060c087890312156131b0578384fd5b86356131bb81614462565b955060208701356131cb81614462565b945060408701356131db81614462565b959894975094956060810135955060808101359460a0909101359350915050565b6000806040838503121561320e578182fd5b823561321981614462565b9150602083013561322981614477565b809150509250929050565b60008060408385031215613246578182fd5b823561325181614462565b915060208301356001600160e01b031981168114613229578182fd5b60006020828403121561327e578081fd5b815161072b81614477565b60006020828403121561329a578081fd5b5035919050565b6000602082840312156132b2578081fd5b81356001600160401b038111156132c7578182fd5b6110f484828501612fe8565b600080604083850312156132e5578182fd5b82356001600160401b03808211156132fb578384fd5b61330786838701612fe8565b9350602085013591508082111561331c578283fd5b5061332985828601612fe8565b9150509250929050565b600080600060608486031215613347578081fd5b83356001600160401b0381111561335c578182fd5b61336886828701613036565b9660208601359650604090950135949350505050565b60006020808385031215613390578182fd5b82516001600160401b03808211156133a6578384fd5b818501604081880312156133b8578485fd5b6133c260406143ce565b925080516133cf81614477565b835280840151828111156133e1578586fd5b019050601f810186136133f2578384fd5b8051613400612cac82614413565b8181528785838501011115613413578586fd5b61342282868301878601614436565b9383019390935250949350505050565b600060208284031215613443578081fd5b81356001600160401b0380821115613459578283fd5b8184016060818703121561346b578384fd5b61347560606143ce565b9250803582811115613485578485fd5b61349187828401613036565b8452506020810135828111156134a5578485fd5b80820160a081890312156134b7578586fd5b6134c160a06143ce565b9150803582526020810135602083015260408101356040830152606081013560608301526080810135848111156134f6578687fd5b61350289828401612fe8565b60808401525050602084015260408101358281111561351f578485fd5b61352b87828401612c8e565b6040850152509195945050505050565b600080600080848603610140811215613552578283fd5b60e081121561355f578283fd5b5061356a60e06143ce565b6135748787612c83565b81526020860135602082015260408601356040820152606086013560608201526080860135608082015260a086013560a082015260c086013560c08201528094505060e08501356001600160401b03808211156135cf578384fd5b6135db88838901612dee565b94506101008701359150808211156135f1578384fd5b6135fd88838901612f0f565b9350610120870135915080821115613613578283fd5b5061362087828801612d45565b91505092959194509250565b60006020828403121561363d578081fd5b5051919050565b600060208284031215613655578081fd5b815160ff8116811461072b578182fd5b600060018060a01b0382511683526020820151604060208501526110f460408501825b600081518084526136a0816020860160208601614436565b601f01601f19169290920160200192915050565b60018060a01b038151168252602081015180516020840152602081015160408401526040810151606084015260608101516080840152505050565b60006bffffffffffffffffffffffff19808960601b168352808860601b1660148401525085602883015284604883015283151560f81b6068830152825161373d816069850160208701614436565b91909101606901979650505050505050565b60006bffffffffffffffffffffffff19808a60601b168352808960601b1660148401525086602883015285604883015284606883015283151560f81b608883015282516137a3816089850160208701614436565b9190910160890198975050505050505050565b60609290921b6001600160601b03191682526001600160e01b031916601482015260180190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b92835260609190911b6001600160601b0319166020830152603482015260540190565b9283526020830191909152604082015260600190565b9182526001600160e01b031916602082015260240190565b60008251613874818460208701614436565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b600060018060a01b03808a16835280891660208401525086604083015285606083015284608083015260e060a083015261394e60e0830185613688565b90508260c083015298975050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015613a0d57888303603f19018552815180516001600160a01b03168452878101518885018890526139f988860182613688565b9689019694505050908601906001016139c3565b509098975050505050505050565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261072b6020830184613688565b600060408252613a6a6040830185613688565b8281036020840152613a7c8185613688565b95945050505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526010908201526f185b1c9958591e4819195c1b1bde595960821b604082015260600190565b60208082526022908201527f70726f78792068617320616c7265616479206265656e20696e697469616c697a604082015261195960f21b606082015260800190565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b6020808252601490820152731d1a5b595bdd5d081a5b9cdd59999a58da595b9d60621b604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601490820152731ad9595c195c881c185e5bdd5d0819985a5b195960621b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602c908201527f737570706c696564206574686572206973206e6f7420657175616c20746f206760408201526b185cc81c995c5d595cdd195960a21b606082015260800190565b6020808252601a908201527f6661696c656420746f207265706179206c6f73742066756e6473000000000000604082015260600190565b6020808252601390820152727365747570207068617365206661696c75726560681b604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b60208082526024908201527f696e73756666696369656e742066756e647320696e206c6971756964697479206040820152631c1bdbdb60e21b606082015260800190565b6020808252601c908201527f6f6e6c792063616e2062652063616c6c6564206279206b656570657200000000604082015260600190565b6020808252601d908201527f6e6f742061207265676973746572656420626f72726f772070726f7879000000604082015260600190565b60208082526037908201527f6973206e6f742061206c6f616e20726571756573742c20747279207573696e6760408201527f2065786563757465536869667453616e73426f72726f77000000000000000000606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601f908201527f6661696c656420746f2072657475726e20626f6e6420746f206b656570657200604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526024908201527f6c69717569646974792072657175657374207369676e61747572652072656a6560408201526318dd195960e21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f696e636f72726563742067617320737570706c696564207769746820676173206040820152681c995c5d595cdd195960ba1b606082015260800190565b602080825260169082015275189bdb99081cdd589b5a5cdcda5bdb8819985a5b195960521b604082015260600190565b6020808252600e908201526d18dc99585d194c8819985a5b195960921b604082015260600190565b60208082526045908201527f63616e2774207a6970206d6f64756c65207265676973746174696f6e733a206d60408201527f6f64756c65732e6c656e67746820213d206d6f64756c6544657461696c732e6c6060820152640cadccee8d60db1b608082015260a00190565b6020808252818101527f6e6f7420612072656769737465726564206c697175696469747920746f6b656e604082015260600190565b60208082526017908201527f6c6f616e207265736f6c7574696f6e206661696c757265000000000000000000604082015260600190565b60208082526021908201527f6661696c656420746f2072657061792074686520676f7665726e696e672044416040820152604f60f81b606082015260800190565b602080825260129082015271626f6e642062656c6f77206d696e696d756d60701b604082015260600190565b6020808252603e908201527f74686520746f6b656e20737570706c696564206973206e6f742061207368696660408201527f74657220746f6b656e202d2d20646563696d616c7320746f6f20686967680000606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6020808252601490820152736c6f616e2065786365656473206d6178696d756d60601b604082015260600190565b918252602082015260400190565b8151151581526020808301516001600160a01b0390811691830191909152604080840151821690830152606092830151169181019190915260800190565b6020808252825160e08383015280516001600160a01b039081166101008501528183015116610120840152604081015161014084015260608101516101608401526080810151151561018084015260a0015160c06101a08401528051600092916101c085019182919061433e81846138af565b9350839250859181860284019086015b8284101561437a578482038652614366828251613665565b95870195600194909401939150860161434e565b5085890151945061438e60408901866136b4565b604089015160e089015280965050505050505092915050565b60006020825282511515602083015260208301516040808401526110f46060840182613688565b6040518181016001600160401b03811182821017156143ec57600080fd5b604052919050565b60006001600160401b03821115614409578081fd5b5060209081020190565b60006001600160401b03821115614428578081fd5b50601f01601f191660200190565b60005b83811015614451578181015183820152602001614439565b838111156108075750506000910152565b6001600160a01b03811681146107a057600080fd5b80151581146107a057600080fdfe608060405234801561001057600080fd5b50610393806100206000396000f3fe6080604052600436106100345760003560e01c80638e03e6cd14610039578063cf3090121461004e578063f83d08ba14610079575b600080fd5b61004c610047366004610255565b61008e565b005b34801561005a57600080fd5b50610063610175565b604051610070919061030b565b60405180910390f35b34801561008557600080fd5b5061004c61017e565b60005460ff161561009e57600080fd5b6001600160a01b038116156101695761014482826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016100dd91906102de565b60206040518083038186803b1580156100f557600080fd5b505afa158015610109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012d919061028d565b6001600160a01b038416919063ffffffff61018d16565b6101695760405162461bcd60e51b815260040161016090610316565b60405180910390fd5b816001600160a01b0316ff5b60005460ff1681565b6000805460ff19166001179055565b600080846001600160a01b03166101a485856101ff565b6040516101b191906102a5565b6000604051808303816000865af19150503d80600081146101ee576040519150601f19603f3d011682016040523d82523d6000602084013e6101f3565b606091505b50909695505050505050565b606063a9059cbb60e01b838360405160240161021c9291906102f2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529392505050565b60008060408385031215610267578182fd5b823561027281610345565b9150602083013561028281610345565b809150509250929050565b60006020828403121561029e578081fd5b5051919050565b60008251815b818110156102c557602081860181015185830152016102ab565b818111156102d35782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b602080825260159082015274657263323020666f7277617264206661696c75726560581b604082015260600190565b6001600160a01b038116811461035a57600080fd5b5056fea26469706673582212200ae2de389fc4c434ac0aa10c8d91d6fd790f0728e0df3289c86c07ffda762b5564736f6c634300060a0033a2646970667358221220523e52e8cdbde005745fd6c131ad58448e3832257d4a53745cb5282f300873c364736f6c634300060a0033",
  "libraries": {
    "ShifterBorrowProxyFactoryLib": "0x7c2C195CD6D34B8F845992d380aADB2730bB9C6F"
  },
  "devdoc": {
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/ShifterPool.sol:ShifterPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5132,
        "contract": "contracts/ShifterPool.sol:ShifterPool",
        "label": "isolate",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Isolate)6470_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Module)2355_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BorrowProxyLib.Module)",
        "numberOfBytes": "32",
        "value": "t_struct(Module)2355_storage"
      },
      "t_struct(ControllerIsolate)2346_storage": {
        "encoding": "inplace",
        "label": "struct BorrowProxyLib.ControllerIsolate",
        "members": [
          {
            "astId": 2333,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "proxyInitializerRecord",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 2337,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "ownerByProxy",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 2341,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "tokenByProxy",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 2345,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "isKeeper",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Isolate)6470_storage": {
        "encoding": "inplace",
        "label": "struct ShifterPoolLib.Isolate",
        "members": [
          {
            "astId": 6427,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "genesis",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6429,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "borrowProxyImplementation",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6431,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "assetForwarderImplementation",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6433,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "shifterRegistry",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6435,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "minTimeout",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6437,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "poolFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6439,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "daoFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6441,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "maxLoan",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6443,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "gasEstimate",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6445,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "maxGasPriceForRefund",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 6449,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "gasReserved",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6453,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "isKeeper",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6457,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "provisionExecuted",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_bytes32,t_bool)"
          },
          {
            "astId": 6461,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "tokenToLiquidityToken",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 6465,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "tokenToBaseFee",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6467,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "borrowProxyController",
            "offset": 0,
            "slot": "15",
            "type": "t_struct(ControllerIsolate)2346_storage"
          },
          {
            "astId": 6469,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "registry",
            "offset": 0,
            "slot": "19",
            "type": "t_struct(ModuleRegistry)2729_storage"
          }
        ],
        "numberOfBytes": "640"
      },
      "t_struct(Module)2355_storage": {
        "encoding": "inplace",
        "label": "struct BorrowProxyLib.Module",
        "members": [
          {
            "astId": 2348,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "isPrecompiled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2350,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "assetSubmodule",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2352,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "liquidationSubmodule",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2354,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "repaymentSubmodule",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ModuleRegistry)2729_storage": {
        "encoding": "inplace",
        "label": "struct BorrowProxyLib.ModuleRegistry",
        "members": [
          {
            "astId": 2728,
            "contract": "contracts/ShifterPool.sol:ShifterPool",
            "label": "modules",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(Module)2355_storage)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "3708400",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "_executeSafeView(bytes,bytes)": "infinite",
      "cloneConstructor(bytes)": "infinite",
      "computeProxyAddress(bytes32)": "infinite",
      "deployAssetForwarderClone(bytes32)": "infinite",
      "deployAssetForwarderImplementation()": "infinite",
      "deployBorrowProxyImplementation()": "infinite",
      "executeBorrow(((address,address,bytes32,uint256,bool,(address,bytes)[]),uint256,bytes),uint256,uint256)": "infinite",
      "executeShiftSansBorrow((((address,address,bytes32,uint256,bool,(address,bytes)[]),uint256,bytes),(bytes32,uint256,bytes32,uint256,bytes),(address,bytes)[]))": "infinite",
      "fetchModuleHandler(address,bytes4)": "infinite",
      "getAssetForwarderImplementationHandler()": "1093",
      "getGasReserved(address)": "1308",
      "getLiquidityTokenForTokenHandler(address)": "1342",
      "getLiquidityTokenHandler(address)": "infinite",
      "getProxyOwnerHandler(address)": "infinite",
      "getProxyTokenHandler(address)": "infinite",
      "getShifterHandler(address)": "infinite",
      "owner()": "1159",
      "payoutCallbackGas(address,uint256,uint256)": "infinite",
      "query(bytes,bytes)": "infinite",
      "relayResolveLoan(address,address,address,uint256,uint256,uint256)": "infinite",
      "renounceOwnership()": "24249",
      "setKeeper(address,bool)": "infinite",
      "setup((address,uint256,uint256,uint256,uint256,uint256,uint256),(uint8,address,bytes4[])[],(bool,address,address,address)[],(address,address,uint256)[])": "infinite",
      "transferOwnership(address)": "24521",
      "validateProxyRecordHandler(bytes)": "infinite"
    },
    "internal": {
      "_executeBorrow(struct ShifterPoolLib.BorrowState memory,struct ShifterBorrowProxyLib.LiquidityRequestParcel memory,uint256,uint256)": "infinite",
      "_executeShiftSansBorrow(struct ShifterBorrowProxyLib.SansBorrowShiftParcel memory)": "infinite",
      "deployBorrowProxyClone(bytes32)": "infinite",
      "validateUnderMaxLoan(struct ShifterBorrowProxyLib.LiquidityRequestParcel memory)": "infinite"
    }
  }
}